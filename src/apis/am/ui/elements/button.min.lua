local a=require("cc.expect")local b=require("am.core")local c=require("am.ui.anchor")local d=require("am.ui.const")local e=require("am.ui.event")local f=require("am.ui.helpers")local g=require("am.ui.elements.text")local h=require("am.ui.elements.frame")local i=h.Bound:extend("am.ui.BoundButton")function i:updateLabel(j)self.obj:updateLabel(self.output,j)end;function i:activate(k)self.obj:activate(self.output,k)end;function i:deactivate()self.obj:deactivate(self.output)end;function i:addActivateHandler(l)return self.obj:addActivateHandler(l)end;function i:onActivate(m)self.obj:onActivate(self.output,m)end;function i:onDeactivate(m)self.obj:onDeactivate(self.output,m)end;function i:onTouch(m)self.obj:onTouch(self.output,m)end;function i:onClick(m)self.obj:onClick(self.output,m)end;function i:onUp(m)self.obj:onUp(self.output,m)end;local n=h:extend("am.ui.Button")n.Bound=i;function n:init(o,j,p)p=p or{}a.expect(1,o,"table")a.expect(2,j,"string")a.field(p,"labelAnchor","table","nil")a.field(p,"disabled","boolean","nil")a.field(p,"activateOnTouch","boolean","nil")a.field(p,"activateOnLeftClick","boolean","nil")a.field(p,"activateOnRightClick","boolean","nil")a.field(p,"activateOnMiddleClick","boolean","nil")if p.labelAnchor==nil then p.labelAnchor=c.Middle()end;if p.padLeft==nil then p.padLeft=1 end;if p.disabled==nil then p.disabled=false end;if p.activateOnTouch==nil then p.activateOnTouch=true end;if p.activateOnLeftClick==nil then p.activateOnLeftClick=true end;if p.activateOnRightClick==nil then p.activateOnRightClick=true end;if p.activateOnMiddleClick==nil then p.activateOnMiddleClick=true end;n.super.init(self,o,p)self.label=g(p.labelAnchor,j,{id=string.format("%s.label",self.id)})self.disabled=p.disabled;self.activated=false;self.activateOnTouch=p.activateOnTouch;self.activateOnLeftClick=p.activateOnLeftClick;self.activateOnRightClick=p.activateOnRightClick;self.activateOnMiddleClick=p.activateOnMiddleClick;self.activateHandlers={}self.touchTimer=nil;self:add(self.label)self:validate()return self end;function n:updateLabel(q,j)q=self:makeScreen(q)self.label:update(q,j)end;function n:getBaseWidth()local r=n.super.getBaseWidth(self)if self.width~=nil then return r end;return r+#self.label.label-1 end;function n:getFillColor(q)a.expect(1,q,"table","nil")if q~=nil and self.activated then f.requireOutput(q)f.getColor(self.borderColor,q.getBackgroundColor())end;if self.activated then return self.borderColor end;return self.fillColor end;function n:getBorderColor(q)a.expect(1,q,"table","nil")if q~=nil and not self.activated then f.requireOutput(q)f.getColor(self.borderColor,q.getBackgroundColor())end;if self.activated then return self.fillColor end;return self.borderColor end;function n:activate(q,k)if self.disabled or self.activated then return end;a.expect(2,k,"boolean","nil")self.activated=true;local m=e.ButtonActivateEvent(q,self.id,k)os.queueEvent(m.name,m)end;function n:deactivate(q)if not self.activated then return end;self.activated=false;local m=e.ButtonDeactivateEvent(q,self.id)os.queueEvent(m.name,m)end;function n:addActivateHandler(l)a.expect(1,l,"function")local s=tostring(l)self.activateHandlers[s]=l;return function()self.activateHandlers[s]=nil end end;function n:onActivate(q,m)if self.disabled then return end;self.activated=true;for t,l in pairs(self.activateHandlers)do l(self,q,m)end;self:render(q)if m.touch then self.touchTimer=os.startTimer(0.5)end end;function n:onDeactivate(q,m)self.activated=false;self:render(q)end;function n:onTouch(q,m)if self.disabled or self.activated or not self.activateOnTouch then return end;self:activate(q,true)end;function n:onClick(q,m)if self.disabled or self.activated then return end;if m.clickType==d.Click.Left and self.activateOnLeftClick then self:activate(q)elseif m.clickType==d.Click.Right and self.activateOnRightClick then self:activate(q)elseif m.clickType==d.Click.Middle and self.activateOnMiddleClick then self:activate(q)end end;function n:onUp(q,m)if self.disabled or not self.activated then return end;self:deactivate(q)end;function n:get(s,q)a.expect(1,s,"string")a.expect(2,q,"table","nil")if s==self.label.id then return self:bind(q)end;if q~=nil then f.requireOutput(q)q=self:makeScreen(q)end;return h.super.get(self,s,q)end;function n:handle(q,m,...)local m,u=b.cleanEventArgs(m,...)a.expect(1,q,"table")a.expect(2,m,"string")f.requireOutput(q)if m=="mouse_up"then self:deactivate(q)return false end;if d.l.Events.UI[m]then local v=u[1]if v.objId==self.id then if m==d.e.Events.frame_touch then self:onTouch(q,v)elseif m==d.e.Events.frame_click then self:onClick(q,v)elseif m==d.e.Events.frame_up then self:onUp(q,v)elseif m==d.e.Events.button_activate then self:onActivate(q,v)elseif m==d.e.Events.button_deactivate then self:onDeactivate(q,v)end elseif m==d.e.Events.text_update then if v.objId==self.label.id then local w=v.oldLabel;local x=v.newLabel;if#x<#w then local y=self.backgroundColor;local z=self.borderColor;local A=self.fillColor;self.backgroundColor=q.getBackgroundColor()self.borderColor=q.getBackgroundColor()self.fillColor=q.getBackgroundColor()self.label.label=string.rep(" ",#w)self:render(q)self.backgroundColor=y;self.borderColor=z;self.fillColor=A end;self.label.label=x;self:render(q)return true end end;return v.objId==self.id or v.objId==self.label.id elseif m=="timer"then if u[1]==self.touchTimer then self.touchTimer=nil;self:deactivate(q)end end;return n.super.handle(self,q,{m,table.unpack(u)})end;function n:bind(q)return i(q,self)end;return n
