local a=require("cc.expect")local b=require("am.core")local c=require("am.ui.base")local d=require("am.ui.bound")local e=require("am.ui.anchor")local f=require("am.ui.const")local g=require("am.ui.event")local h=require("am.ui.helpers")local i=require("am.ui.elements.text")local j=require("am.ui.elements.frame")local k=j.Bound:extend("am.ui.BoundButton")function k:updateLabel(l)self.obj:updateLabel(self.output,l)end;function k:activate(m)self.obj:activate(self.output,m)end;function k:deactivate()self.obj:deactivate(self.output)end;function k:addActivateHandler(n)return self.obj:addActivateHandler(n)end;function k:onActivate(o)self.obj:onActivate(self.output,o)end;function k:onDeactivate(o)self.obj:onDeactivate(self.output,o)end;function k:onTouch(o)self.obj:onTouch(self.output,o)end;function k:onClick(o)self.obj:onClick(self.output,o)end;function k:onUp(o)self.obj:onUp(self.output,o)end;local p=j:extend("am.ui.Button")p.Bound=k;function p:init(q,l,r)r=r or{}a.expect(1,q,"table")a.expect(2,l,"string")a.field(r,"labelAnchor","table","nil")a.field(r,"disabled","boolean","nil")a.field(r,"activateOnTouch","boolean","nil")a.field(r,"activateOnLeftClick","boolean","nil")a.field(r,"activateOnRightClick","boolean","nil")a.field(r,"activateOnMiddleClick","boolean","nil")if r.labelAnchor==nil then r.labelAnchor=e.Middle()end;if r.padLeft==nil then r.padLeft=1 end;if r.disabled==nil then r.disabled=false end;if r.activateOnTouch==nil then r.activateOnTouch=true end;if r.activateOnLeftClick==nil then r.activateOnLeftClick=true end;if r.activateOnRightClick==nil then r.activateOnRightClick=true end;if r.activateOnMiddleClick==nil then r.activateOnMiddleClick=true end;p.super.init(self,q,r)self.label=i(r.labelAnchor,l,{id=string.format("%s.label",self.id)})self.disabled=r.disabled;self.activated=false;self.activateOnTouch=r.activateOnTouch;self.activateOnLeftClick=r.activateOnLeftClick;self.activateOnRightClick=r.activateOnRightClick;self.activateOnMiddleClick=r.activateOnMiddleClick;self.activateHandlers={}self.touchTimer=nil;self:add(self.label)self:validate()return self end;function p:updateLabel(s,l)s=self:makeScreen(s)self.label:update(s,l)end;function p:getBaseWidth()local t=p.super.getBaseWidth(self)if self.width~=nil then return t end;return t+#self.label.label-1 end;function p:getFillColor(s)a.expect(1,s,"table","nil")if s~=nil and self.activated then h.requireOutput(s)h.getColor(self.borderColor,s.getBackgroundColor())end;if self.activated then return self.borderColor end;return self.fillColor end;function p:getBorderColor(s)a.expect(1,s,"table","nil")if s~=nil and not self.activated then h.requireOutput(s)h.getColor(self.borderColor,s.getBackgroundColor())end;if self.activated then return self.fillColor end;return self.borderColor end;function p:activate(s,m)if self.disabled or self.activated then return end;a.expect(2,m,"boolean","nil")self.activated=true;local o=g.ButtonActivateEvent(s,self.id,m)os.queueEvent(o.name,o)end;function p:deactivate(s)if not self.activated then return end;self.activated=false;local o=g.ButtonDeactivateEvent(s,self.id)os.queueEvent(o.name,o)end;function p:addActivateHandler(n)a.expect(1,n,"function")local u=tostring(n)self.activateHandlers[u]=n;return function()self.activateHandlers[u]=nil end end;function p:onActivate(s,o)if self.disabled then return end;self.activated=true;for v,n in pairs(self.activateHandlers)do n(self,s,o)end;self:render(s)if o.touch then self.touchTimer=os.startTimer(0.5)end end;function p:onDeactivate(s,o)self.activated=false;self:render(s)end;function p:onTouch(s,o)if self.disabled or self.activated or not self.activateOnTouch then return end;self:activate(s,true)end;function p:onClick(s,o)if self.disabled or self.activated then return end;if o.clickType==f.Click.Left and self.activateOnLeftClick then self:activate(s)elseif o.clickType==f.Click.Right and self.activateOnRightClick then self:activate(s)elseif o.clickType==f.Click.Middle and self.activateOnMiddleClick then self:activate(s)end end;function p:onUp(s,o)if self.disabled or not self.activated then return end;self:deactivate(s)end;function p:get(u,s)a.expect(1,u,"string")a.expect(2,s,"table","nil")if u==self.label.id then return self:bind(s)end;if s~=nil then h.requireOutput(s)s=self:makeScreen(s)end;return j.super.get(self,u,s)end;function p:handle(s,o,...)local o,w=b.cleanEventArgs(o,...)a.expect(1,s,"table")a.expect(2,o,"string")h.requireOutput(s)if o=="mouse_up"then self:deactivate(s)return false end;if f.l.Events.UI[o]then local x=w[1]if x.objId==self.id then if o==f.e.Events.frame_touch then self:onTouch(s,x)elseif o==f.e.Events.frame_click then self:onClick(s,x)elseif o==f.e.Events.frame_up then self:onUp(s,x)elseif o==f.e.Events.button_activate then self:onActivate(s,x)elseif o==f.e.Events.button_deactivate then self:onDeactivate(s,x)end elseif o==f.e.Events.text_update then if x.objId==self.label.id then local y=x.oldLabel;local z=x.newLabel;if#z<#y then local A=self.backgroundColor;local B=self.borderColor;local C=self.fillColor;self.backgroundColor=s.getBackgroundColor()self.borderColor=s.getBackgroundColor()self.fillColor=s.getBackgroundColor()self.label.label=string.rep(" ",#y)self:render(s)self.backgroundColor=A;self.borderColor=B;self.fillColor=C end;self.label.label=z;self:render(s)return true end end;return x.objId==self.id or x.objId==self.label.id elseif o=="timer"then if w[1]==self.touchTimer then self.touchTimer=nil;self:deactivate(s)end end;return p.super.handle(self,s,{o,table.unpack(w)})end;function p:bind(s)return d.BoundButton(s,self)end;return p
