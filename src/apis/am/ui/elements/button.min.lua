local a=require("cc.expect")require(settings.get("ghu.base").."core/apis/ghu")local b=require("am.core")local c=require("am.ui.base")local d=require("am.ui.bound")local e=require("am.ui.anchor")local f=require("am.ui.const")local g=require("am.ui.event")local h=require("am.ui.helpers")local i=require("am.ui.elements.text")local j,k=require("am.ui.elements.frame")local l=k:extend("am.ui.BoundButton")function l:updateLabel(m)self.obj:updateLabel(self.output,m)end;function l:activate(n)self.obj:activate(self.output,n)end;function l:deactivate()self.obj:deactivate(self.output)end;function l:addActivateHandler(o)return self.obj:addActivateHandler(o)end;function l:onActivate(p)self.obj:onActivate(self.output,p)end;function l:onDeactivate(p)self.obj:onDeactivate(self.output,p)end;function l:onTouch(p)self.obj:onTouch(self.output,p)end;function l:onClick(p)self.obj:onClick(self.output,p)end;function l:onUp(p)self.obj:onUp(self.output,p)end;local q=j:extend("am.ui.Button")function q:init(r,m,s)s=s or{}a.expect(1,r,"table")a.expect(2,m,"string")a.field(s,"labelAnchor","table","nil")a.field(s,"disabled","boolean","nil")a.field(s,"activateOnTouch","boolean","nil")a.field(s,"activateOnLeftClick","boolean","nil")a.field(s,"activateOnRightClick","boolean","nil")a.field(s,"activateOnMiddleClick","boolean","nil")if s.labelAnchor==nil then s.labelAnchor=e.Middle()end;if s.padLeft==nil then s.padLeft=1 end;if s.disabled==nil then s.disabled=false end;if s.activateOnTouch==nil then s.activateOnTouch=true end;if s.activateOnLeftClick==nil then s.activateOnLeftClick=true end;if s.activateOnRightClick==nil then s.activateOnRightClick=true end;if s.activateOnMiddleClick==nil then s.activateOnMiddleClick=true end;q.super.init(self,r,s)self.label=i(s.labelAnchor,m,{id=string.format("%s.label",self.id)})self.disabled=s.disabled;self.activated=false;self.activateOnTouch=s.activateOnTouch;self.activateOnLeftClick=s.activateOnLeftClick;self.activateOnRightClick=s.activateOnRightClick;self.activateOnMiddleClick=s.activateOnMiddleClick;self.activateHandlers={}self.touchTimer=nil;self:add(self.label)self:validate()return self end;function q:updateLabel(t,m)t=self:makeScreen(t)self.label:update(t,m)end;function q:getBaseWidth()local u=q.super.getBaseWidth(self)if self.width~=nil then return u end;return u+#self.label.label-1 end;function q:getFillColor(t)a.expect(1,t,"table","nil")if t~=nil and self.activated then h.requireOutput(t)h.getColor(self.borderColor,t.getBackgroundColor())end;if self.activated then return self.borderColor end;return self.fillColor end;function q:getBorderColor(t)a.expect(1,t,"table","nil")if t~=nil and not self.activated then h.requireOutput(t)h.getColor(self.borderColor,t.getBackgroundColor())end;if self.activated then return self.fillColor end;return self.borderColor end;function q:activate(t,n)if self.disabled or self.activated then return end;a.expect(2,n,"boolean","nil")self.activated=true;local p=g.ButtonActivateEvent(t,self.id,n)os.queueEvent(p.name,p)end;function q:deactivate(t)if not self.activated then return end;self.activated=false;local p=g.ButtonDeactivateEvent(t,self.id)os.queueEvent(p.name,p)end;function q:addActivateHandler(o)a.expect(1,o,"function")local v=tostring(o)self.activateHandlers[v]=o;return function()self.activateHandlers[v]=nil end end;function q:onActivate(t,p)if self.disabled then return end;self.activated=true;for w,o in pairs(self.activateHandlers)do o(self,t,p)end;self:render(t)if p.touch then self.touchTimer=os.startTimer(0.5)end end;function q:onDeactivate(t,p)self.activated=false;self:render(t)end;function q:onTouch(t,p)if self.disabled or self.activated or not self.activateOnTouch then return end;self:activate(t,true)end;function q:onClick(t,p)if self.disabled or self.activated then return end;if p.clickType==f.Click.Left and self.activateOnLeftClick then self:activate(t)elseif p.clickType==f.Click.Right and self.activateOnRightClick then self:activate(t)elseif p.clickType==f.Click.Middle and self.activateOnMiddleClick then self:activate(t)end end;function q:onUp(t,p)if self.disabled or not self.activated then return end;self:deactivate(t)end;function q:get(v,t)a.expect(1,v,"string")a.expect(2,t,"table","nil")if v==self.label.id then return self:bind(t)end;if t~=nil then h.requireOutput(t)t=self:makeScreen(t)end;return j.super.get(self,v,t)end;function q:handle(t,p,...)local p,x=b.cleanEventArgs(p,...)a.expect(1,t,"table")a.expect(2,p,"string")h.requireOutput(t)if p=="mouse_up"then self:deactivate(t)return false end;if f.l.Events.UI[p]then local y=x[1]if y.objId==self.id then if p==f.e.Events.frame_touch then self:onTouch(t,y)elseif p==f.e.Events.frame_click then self:onClick(t,y)elseif p==f.e.Events.frame_up then self:onUp(t,y)elseif p==f.e.Events.button_activate then self:onActivate(t,y)elseif p==f.e.Events.button_deactivate then self:onDeactivate(t,y)end elseif p==f.e.Events.text_update then if y.objId==self.label.id then local z=y.oldLabel;local A=y.newLabel;if#A<#z then local B=self.backgroundColor;local C=self.borderColor;local D=self.fillColor;self.backgroundColor=t.getBackgroundColor()self.borderColor=t.getBackgroundColor()self.fillColor=t.getBackgroundColor()self.label.label=string.rep(" ",#z)self:render(t)self.backgroundColor=B;self.borderColor=C;self.fillColor=D end;self.label.label=A;self:render(t)return true end end;return y.objId==self.id or y.objId==self.label.id elseif p=="timer"then if x[1]==self.touchTimer then self.touchTimer=nil;self:deactivate(t)end end;return q.super.handle(self,t,{p,unpack(x)})end;function q:bind(t)return d.BoundButton(t,self)end;return q,l
