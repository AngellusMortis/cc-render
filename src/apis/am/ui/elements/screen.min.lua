local a=require("cc.expect")require(settings.get("ghu.base").."core/apis/ghu")local b=require("am.core")local c=require("am.ui.const")local d=require("am.ui.helpers")local e=require("am.ui.elements.group")local f=e:extend("am.ui.Screen")function f:init(g,h)h=h or{}a.expect(1,g,"table","nil")a.field(h,"id","string","nil")a.field(h,"textColor","number","nil")a.field(h,"backgroundColor","number","nil")if g==nil then g=term end;d.requireOutput(g)if h.textColor~=nil then a.range(h.textColor,1)end;if h.backgroundColor~=nil then a.range(h.backgroundColor,1)end;f.super.init(self,h)self.output=g;self.textColor=h.textColor;self.backgroundColor=h.backgroundColor;return self end;function f:get(i)a.expect(1,i,"string")return f.super.get(self,i,self.output)end;function f:render()if not self.visible then return end;local j,k=self.output.getSize()local l=d.getColor(self.textColor,self.output.getTextColor())local m=d.getColor(self.backgroundColor,self.output.getBackgroundColor())self.output.setTextColor(l)self.output.setBackgroundColor(m)self.output.clear()self.output.setCursorPos(1,1)self.output.setCursorBlink(false)f.super.render(self,self.output)self.output.setCursorPos(1,k)self.output.setTextColor(l)self.output.setBackgroundColor(m)end;function f:handle(n,...)local n,o=b.cleanEventArgs(n,...)a.expect(1,n,"string")local g;if c.l.Events.Always[n]then g=self.output else g=d.getEventOutput({n,table.unpack(o)})if not c.l.Events.UI[n]and not d.isSameScreen(self.output,g)then return false end end;if c.l.Events.UI[n]then local p=self:get(o[1].objId)if p~=nil then if p:handle({n,table.unpack(o)})then return true end end;return false end;if n=="term_resize"or n=="monitor_resize"then self:render()return false end;for j,p in pairs(self.i)do if p:handle(g,{n,table.unpack(o)})then return true end end;return true end;function f:bind(g)return self end;return f
