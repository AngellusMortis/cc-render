local a=require("cc.expect")require(settings.get("ghu.base").."core/apis/ghu")local b=require("am.core")local c=require("am.ui.bound")local d=require("am.ui.anchor")local e=require("am.ui.const")local f=require("am.ui.event")local g=require("am.ui.helpers")local h=require("am.ui.elements.text")local i=require("am.ui.elements.frame")local j=i.Bound:extend("am.ui.BoundGroup")c.BoundProgressBar=j;function j:getLabelText()self.obj:getLabelText()end;function j:updateLabel(k,l,m)self.obj:updateLabel(self.output,k,l,m)end;function j:update(n)self.obj:update(self.output,n)end;local o=i:extend("am.ui.ProgressBar")o.Bound=j;function o:init(p,q)q=q or{}a.expect(1,p,"table")a.field(q,"label","string","nil")a.field(q,"labelAnchor","table","nil")a.field(q,"current","number","nil")a.field(q,"total","number","nil")a.field(q,"displayTotal","number","nil")a.field(q,"progressColor","number","nil")a.field(q,"progressTextColor","number","nil")a.field(q,"progressVertical","boolean","nil")a.field(q,"showProgress","boolean","nil")a.field(q,"showPercent","boolean","nil")if q.label==nil then q.label=""end;if q.labelAnchor==nil then q.labelAnchor=d.Anchor(2,1)end;if q.total==nil then q.total=100 end;if q.current==nil then q.current=0 end;if q.progressColor==nil then q.progressColor=colors.green end;if q.progressTextColor==nil then q.progressTextColor=q.textColor end;if q.showProgress==nil then q.showProgress=true end;if q.showPercent==nil then q.showPercent=true end;if q.progressVertical==nil then q.progressVertical=false end;if q.fillHorizontal==nil then q.fillHorizontal=true end;if q.fillVertical==nil then if q.progressVertical then q.fillVertical=true end end;o.super.init(self,p,q)self.baseLabel=q.label;self.current=q.current;self.displayTotal=q.displayTotal;self.total=q.total;self.progressColor=q.progressColor;self.progressTextColor=q.progressTextColor;self.progressVertical=q.progressVertical;self.showProgress=q.showProgress;self.showPercent=q.showPercent;self.label=h(q.labelAnchor,self:getLabelText(),{id=string.format("%s.label",self.id)})self.fillFrame=i(d.BottomLeft(),{id=string.format("%s.fill",self.id),fillVertical=true,border=0})self.fillLabel=h(d.Anchor(1,1),self:getLabelText(),{id=string.format("%s.fillLabel",self.id)})self:add(self.label)self:validate()return self end;function o:validate(r)o.super.validate(self,r)if self.fillFrame==nil then return end;a.field(self,"baseLabel","string")a.field(self,"current","number")a.range(self.current,0)a.field(self,"total","number")a.range(self.total,math.floor(self.current))a.field(self,"displayTotal","number","nil")a.field(self,"progressColor","number")a.range(self.progressColor,1)a.field(self,"showPercent","boolean")a.field(self,"showProgress","boolean")self.padLeft=0;self.padRight=0;self.padTop=0;self.padBottom=0 end;function o:bind(r)return c.BoundProgressBar(r,self)end;function o:get(s,r)a.expect(1,s,"string")a.expect(2,r,"table","nil")if s==self.label.id or s==self.fillFrame.id or s==self.fillLabel.id then return self:bind(r)end;if r~=nil then g.requireOutput(r)r=self:makeScreen(r)end;return i.super.get(self,s,r)end;function o:getLabelText()local k=self.baseLabel;local n=math.min(self.current,self.total)local t=n/self.total;if self.showPercent then k=k..string.format(" %d%%",t*100)end;if self.showProgress then local u=self.current;local v=self.total;if self.displayTotal~=nil then u=math.floor(t*self.displayTotal)v=self.displayTotal end;k=k..string.format(" [%d/%d]",u,v)end;return k end;function o:render(r)if not self.visible then return end;a.expect(1,r,"table","nil")if r==nil then r=term end;local w=self:makeScreen(r)local x=r.getTextColor()local y=r.getBackgroundColor()local z,A=r.getCursorPos()local k=self:getLabelText()self.label.label=k;self.label.textColor=self:getTextColor(r)o.super.render(self,r)local n=math.min(self.current,self.total)local t=n/self.total;local B,C=w.getSize()local D=self.label.anchor:getPos(w,#k,1)local E;if self.progressVertical then E=math.floor(C*t)else E=math.floor(B*t)end;if E>0 then self.fillLabel.label=k;self.fillLabel.textColor=self.progressTextColor;local F=false;if self.progressVertical then D.y=D.y-(C-E)if D.y>0 then F=true end;self.fillFrame.width=B;self.fillFrame.height=E;self.fillFrame.fillVertical=false;self.fillFrame.fillHorizontal=true else if D.x<=E then F=true end;self.fillFrame.width=E;self.fillFrame.height=C;self.fillFrame.fillVertical=true;self.fillFrame.fillHorizontal=false end;if F then self.fillLabel.anchor.x=D.x;self.fillLabel.anchor.y=D.y;self.fillFrame:add(self.fillLabel)else self.fillFrame:reset()end;self.fillFrame.fillColor=self.progressColor;self.fillFrame:render(w)end;r.setTextColor(x)r.setBackgroundColor(y)r.setCursorPos(z,A)end;function o:updateLabel(r,k,l,m)a.expect(1,r,"table")a.expect(2,k,"string","nil")a.expect(3,l,"boolean","nil")a.expect(4,m,"boolean","nil")g.requireOutput(r)local G=k~=nil and self.baseLabel~=k;local H=l~=nil and self.showProgress~=l;local I=m~=nil and self.showPercent~=m;if not(G or H or I)then return end;local J=f.ProgressBarLabelUpdateEvent(r,self.id)if G then J.oldLabel=self.baseLabel;J.newLabel=k;self.baseLabel=k end;if H then J.oldShowProgress=self.showProgress;J.newShowProgress=l;self.showProgress=l end;if I then J.oldShowPercent=self.showPercent;J.newShowPercent=m;self.showPercent=m end;os.queueEvent(J.name,J)end;function o:update(r,n)a.expect(1,r,"table")a.expect(2,n,"number")g.requireOutput(r)n=math.min(self.total,math.max(0,n))if self.current==n then return end;local J=f.ProgressBarUpdateEvent(r,self.id,self.current,n)self.current=n;os.queueEvent(J.name,J)end;function o:handle(r,J,...)local J,K=b.cleanEventArgs(J,...)a.expect(1,r,"table")a.expect(2,J,"string")g.requireOutput(r)if J==e.e.Events.progress_label_update and K[1].objId==self.id then if K[1].newLabel~=nil then self.baseLabel=K[1].newLabel elseif K[1].newShowProgress~=nil then self.showProgress=K[1].newShowProgress elseif K[1].newShowPercent~=nil then self.showPercent=K[1].newShowPercent end;self:render(r)return true elseif J==e.e.Events.progress_update and K[1].objId==self.id then self.current=math.min(self.total,math.max(0,K[1].newCurrent))self:render(r)return true end;o.super.handle(self,r,{J,table.unpack(K)})return false end;return o
