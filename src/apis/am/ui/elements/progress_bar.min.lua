local a=require("cc.expect")local b=require("am.core")local c=require("am.ui.anchor")local d=require("am.ui.const")local e=require("am.ui.event")local f=require("am.ui.helpers")local g=require("am.ui.elements.text")local h=require("am.ui.elements.frame")local i=h.Bound:extend("am.ui.BoundGroup")function i:getLabelText()self.obj:getLabelText()end;function i:updateLabel(j,k,l)self.obj:updateLabel(self.output,j,k,l)end;function i:update(m)self.obj:update(self.output,m)end;local n=h:extend("am.ui.ProgressBar")n.Bound=i;function n:init(o,p)p=p or{}a.expect(1,o,"table")a.field(p,"label","string","nil")a.field(p,"labelAnchor","table","nil")a.field(p,"current","number","nil")a.field(p,"total","number","nil")a.field(p,"displayTotal","number","nil")a.field(p,"progressColor","number","nil")a.field(p,"progressTextColor","number","nil")a.field(p,"progressVertical","boolean","nil")a.field(p,"showProgress","boolean","nil")a.field(p,"showPercent","boolean","nil")if p.label==nil then p.label=""end;if p.labelAnchor==nil then p.labelAnchor=c.Anchor(2,1)end;if p.total==nil then p.total=100 end;if p.current==nil then p.current=0 end;if p.progressColor==nil then p.progressColor=colors.green end;if p.progressTextColor==nil then p.progressTextColor=p.textColor end;if p.showProgress==nil then p.showProgress=true end;if p.showPercent==nil then p.showPercent=true end;if p.progressVertical==nil then p.progressVertical=false end;if p.fillHorizontal==nil then p.fillHorizontal=true end;if p.fillVertical==nil then if p.progressVertical then p.fillVertical=true end end;n.super.init(self,o,p)self.baseLabel=p.label;self.current=p.current;self.displayTotal=p.displayTotal;self.total=p.total;self.progressColor=p.progressColor;self.progressTextColor=p.progressTextColor;self.progressVertical=p.progressVertical;self.showProgress=p.showProgress;self.showPercent=p.showPercent;self.label=g(p.labelAnchor,self:getLabelText(),{id=string.format("%s.label",self.id)})self.fillFrame=h(c.BottomLeft(),{id=string.format("%s.fill",self.id),fillVertical=true,border=0})self.fillLabel=g(c.Anchor(1,1),self:getLabelText(),{id=string.format("%s.fillLabel",self.id)})self:add(self.label)self:validate()return self end;function n:validate(q)n.super.validate(self,q)if self.fillFrame==nil then return end;a.field(self,"baseLabel","string")a.field(self,"current","number")a.range(self.current,0)a.field(self,"total","number")a.range(self.total,math.floor(self.current))a.field(self,"displayTotal","number","nil")a.field(self,"progressColor","number")a.range(self.progressColor,1)a.field(self,"showPercent","boolean")a.field(self,"showProgress","boolean")self.padLeft=0;self.padRight=0;self.padTop=0;self.padBottom=0 end;function n:bind(q)return i(q,self)end;function n:get(r,q)a.expect(1,r,"string")a.expect(2,q,"table","nil")if r==self.label.id or r==self.fillFrame.id or r==self.fillLabel.id then return self:bind(q)end;if q~=nil then f.requireOutput(q)q=self:makeScreen(q)end;return h.super.get(self,r,q)end;function n:getLabelText()local j=self.baseLabel;local m=math.min(self.current,self.total)local s=m/self.total;if self.showPercent then j=j..string.format(" %d%%",s*100)end;if self.showProgress then local t=self.current;local u=self.total;if self.displayTotal~=nil then t=math.floor(s*self.displayTotal)u=self.displayTotal end;j=j..string.format(" [%d/%d]",t,u)end;return j end;function n:render(q)if not self.visible then return end;a.expect(1,q,"table","nil")if q==nil then q=term end;local v=self:makeScreen(q)local w=q.getTextColor()local x=q.getBackgroundColor()local y,z=q.getCursorPos()local j=self:getLabelText()self.label.label=j;self.label.textColor=self:getTextColor(q)n.super.render(self,q)local m=math.min(self.current,self.total)local s=m/self.total;local A,B=v.getSize()local C=self.label.anchor:getPos(v,#j,1)local D;if self.progressVertical then D=math.floor(B*s)else D=math.floor(A*s)end;if D>0 then self.fillLabel.label=j;self.fillLabel.textColor=self.progressTextColor;local E=false;if self.progressVertical then C.y=C.y-(B-D)if C.y>0 then E=true end;self.fillFrame.width=A;self.fillFrame.height=D;self.fillFrame.fillVertical=false;self.fillFrame.fillHorizontal=true else if C.x<=D then E=true end;self.fillFrame.width=D;self.fillFrame.height=B;self.fillFrame.fillVertical=true;self.fillFrame.fillHorizontal=false end;if E then self.fillLabel.anchor.x=C.x;self.fillLabel.anchor.y=C.y;self.fillFrame:add(self.fillLabel)else self.fillFrame:reset()end;self.fillFrame.fillColor=self.progressColor;self.fillFrame:render(v)end;q.setTextColor(w)q.setBackgroundColor(x)q.setCursorPos(y,z)end;function n:updateLabel(q,j,k,l)a.expect(1,q,"table")a.expect(2,j,"string","nil")a.expect(3,k,"boolean","nil")a.expect(4,l,"boolean","nil")f.requireOutput(q)local F=j~=nil and self.baseLabel~=j;local G=k~=nil and self.showProgress~=k;local H=l~=nil and self.showPercent~=l;if not(F or G or H)then return end;local I=e.ProgressBarLabelUpdateEvent(q,self.id)if F then I.oldLabel=self.baseLabel;I.newLabel=j;self.baseLabel=j end;if G then I.oldShowProgress=self.showProgress;I.newShowProgress=k;self.showProgress=k end;if H then I.oldShowPercent=self.showPercent;I.newShowPercent=l;self.showPercent=l end;os.queueEvent(I.name,I)end;function n:update(q,m)a.expect(1,q,"table")a.expect(2,m,"number")f.requireOutput(q)m=math.min(self.total,math.max(0,m))if self.current==m then return end;local I=e.ProgressBarUpdateEvent(q,self.id,self.current,m)self.current=m;os.queueEvent(I.name,I)end;function n:handle(q,I,...)local I,J=b.cleanEventArgs(I,...)a.expect(1,q,"table")a.expect(2,I,"string")f.requireOutput(q)if I==d.e.Events.progress_label_update and J[1].objId==self.id then if J[1].newLabel~=nil then self.baseLabel=J[1].newLabel elseif J[1].newShowProgress~=nil then self.showProgress=J[1].newShowProgress elseif J[1].newShowPercent~=nil then self.showPercent=J[1].newShowPercent end;self:render(q)return true elseif I==d.e.Events.progress_update and J[1].objId==self.id then self.current=math.min(self.total,math.max(0,J[1].newCurrent))self:render(q)return true end;n.super.handle(self,q,{I,table.unpack(J)})return false end;return n
