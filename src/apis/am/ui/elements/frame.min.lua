local a=require("cc.expect")require(settings.get("ghu.base").."core/apis/ghu")local b=require("am.core")local c=require("am.ui.base")local d=require("am.ui.anchor")local e=require("am.ui.const")local f=require("am.ui.event")local g=require("am.ui.helpers")local h,i=require("am.ui.elements.group")local j=i:extend("am.ui.BoundFrame")function j:getBackgroundColor()return self.obj:getBackgroundColor(self.output)end;function j:getFillColor()return self.obj:getFillColor(self.output)end;function j:getBorderColor()return self.obj:getBorderColor(self.output)end;function j:getTextColor()return self.obj:getTextColor(self.output)end;function j:getBaseWidth()return self.obj:getBaseWidth()end;function j:getWidth(k)return self.obj:getWidth(self.output,k)end;function j:getBaseHeight()return self.obj:getBaseHeight()end;function j:getHeight(l)return self.obj:getHeight(self.output,l)end;function j:makeScreen(m,n,o,p)return self.obj:makeScreen(self.output,m,n,o,p)end;function j:within(q,r)return self.obj:within(self.output,q,r)end;local s=h:extend("am.ui.Frame")function s:init(t,u)u=u or{}a.expect(1,t,"table")a.field(u,"id","string","nil")a.field(u,"width","number","nil")a.field(u,"height","number","nil")a.field(u,"fillHorizontal","boolean","nil")a.field(u,"fillVertical","boolean","nil")a.field(u,"padLeft","number","nil")a.field(u,"padRight","number","nil")a.field(u,"padTop","number","nil")a.field(u,"padBottom","number","nil")a.field(u,"backgroundColor","number","nil")a.field(u,"borderColor","number","nil")a.field(u,"fillColor","number","nil")a.field(u,"textColor","number","nil")a.field(u,"border","number","nil")a.field(u,"scrollBar","boolean","nil")a.field(u,"scrollBarTrackColor","number","nil")a.field(u,"scrollBarColor","number","nil")a.field(u,"scrollBarButtonColor","number","nil")a.field(u,"scrollBarTextColor","number","nil")a.field(u,"scrollBarDisabledColor","number","nil")s.super.init(self,u)if u.fillHorizontal==nil then u.fillHorizontal=false end;if u.fillVertical==nil then u.fillVertical=false end;if u.padding==nil then u.padding=1 end;if u.borderColor==nil then u.borderColor=colors.gray end;if u.border==nil then u.border=1 end;if u.padLeft==nil then u.padLeft=0 end;if u.padRight==nil then u.padRight=u.padLeft end;if u.padTop==nil then u.padTop=math.max(0,u.padLeft-1)end;if u.padBottom==nil then u.padBottom=u.padTop end;if u.scrollBar==nil then u.scrollBar=false end;if u.scrollBarTrackColor==nil then u.scrollBarTrackColor=colors.lightGray end;if u.scrollBarColor==nil then u.scrollBarColor=colors.gray end;if u.scrollBarButtonColor==nil then u.scrollBarButtonColor=u.scrollBarColor end;if u.scrollBarTextColor==nil then u.scrollBarTextColor=u.scrollBarTrackColor end;if u.scrollBarDisabledColor==nil then u.scrollBarDisabledColor=colors.black end;self.anchor=t;self.width=u.width;self.height=u.height;self.fillHorizontal=u.fillHorizontal;self.fillVertical=u.fillVertical;self.padLeft=u.padLeft;self.padRight=u.padRight;self.padTop=u.padTop;self.padBottom=u.padBottom;self.backgroundColor=u.backgroundColor;self.borderColor=u.borderColor;self.fillColor=u.fillColor;self.textColor=u.textColor;self.border=u.border;self.scrollBar=u.scrollBar;self.scrollBarTrackColor=u.scrollBarTrackColor;self.scrollBarColor=u.scrollBarColor;self.scrollBarButtonColor=u.scrollBarButtonColor;self.scrollBarTextColor=u.scrollBarTextColor;self.scrollBarDisabledColor=u.scrollBarDisabledColor;if self.scrollBar then self.currentScroll=0 else self.currentScroll=-1 end;self.maxScroll=0;self:validate()return self end;function s:get(v,w)a.expect(1,v,"string")a.expect(2,w,"table","nil")local x=b.split(v,".")local y=x[1]for z=2,#x-1,1 do y=y.."."..x[z]end;if y==self.id then return self:bind(w)end;if w~=nil then g.requireOutput(w)w=self:makeScreen(w)end;return s.super.get(self,v,w)end;function s:validate(w)a.field(self,"border","number")a.range(self.border,0,3)a.field(self,"anchor","table")if not g.isAnchor(self.anchor)then error("anchor much be of type Anchor")end;a.field(self,"width","number","nil")if self.width~=nil then a.range(self.width,1)end;a.field(self,"height","number","nil")if self.height~=nil then if self.border>0 then a.range(self.height,3)else a.range(self.height,1)end end;if self.backgroundColor~=nil then a.field(self,"backgroundColor","number")a.range(self.backgroundColor,1)end;if self.fillColor~=nil then a.field(self,"fillColor","number")a.range(self.fillColor,1)end;if self.borderColor~=nil then a.field(self,"borderColor","number")a.range(self.borderColor,1)end;if self.textColor~=nil then a.field(self,"textColor","number")a.range(self.textColor,1)end;if self.scrollBar and self.height==nil then error(string.format("frame (%s) cannot have nil height with a scrollBar"))end end;function s:getBackgroundColor(w)a.expect(1,w,"table","nil")if w~=nil then g.requireOutput(w)return g.getColor(self.backgroundColor,w.getBackgroundColor())end;return self.backgroundColor end;function s:getFillColor(w)return self.fillColor end;function s:getBorderColor(w)a.expect(1,w,"table","nil")if w~=nil then g.requireOutput(w)g.getColor(self.borderColor,w.getBackgroundColor())end;return self.borderColor end;function s:getTextColor(w)a.expect(1,w,"table","nil")if w~=nil then g.requireOutput(w)return g.getColor(self.textColor,w.getTextColor())end;return self.textColor end;function s:getBaseWidth()local n=self.width;if n~=nil then return n end;n=1+self.padLeft+self.padRight;if self.border>0 then n=n+2 end;return n end;function s:getWidth(w,k)a.expect(2,k,"number","nil")if k==nil then k=self.anchor:getXPos(w,self:getBaseWidth())end;local n=self:getBaseWidth()if self.fillHorizontal and not(self.anchor:is(d.Right)or self.anchor:is(d.TopRight)or self.anchor:is(d.BottomRight))then local A,_=w.getSize()n=A-k+1 end;return n end;function s:getBaseHeight()local o=self.height;if o~=nil then return o end;o=1+self.padTop+self.padBottom;if self.border>0 then o=o+2 end;return o end;function s:getHeight(w,l)a.expect(2,l,"number","nil")local o=self:getBaseHeight()if self.fillVertical and not(self.anchor:is(d.Bottom)and self.anchor:is(d.BottomLeft)and self.anchor:is(d.BottomRight))then local _,B=w.getSize()o=B-l+1 end;return o end;function s:makeScreen(w,m,n,o,p)a.expect(1,w,"table")a.expect(2,m,"table","nil")a.expect(3,n,"number","nil")a.expect(4,o,"number","nil")a.expect(5,p,"boolean","nil")g.requireOutput(w)if m==nil then m=self.anchor:getPos(w,self:getBaseWidth(),self:getBaseHeight())else m=b.copy(m)end;if p==nil then p=true end;if not g.isPos(m)then error("pos must be a ScreenPos")end;if n==nil then n=self:getWidth(w,m.x)end;if o==nil then o=self:getHeight(w,m.y)end;local C=-1;if self.scrollBar then _,C=w.getSize()end;if self.border>0 then n=n-2;o=o-2;m.x=m.x+1;m.y=m.y+1;C=C-2 end;if self.scrollBar then n=n-1 end;local D=c.FrameScreen(w,self.id,b.copy(m),n,o,self:getTextColor(w),self:getFillColor(w),self.currentScroll,C)if p then D:addPadding(self.padLeft,self.padRight,self.padTop,self.padBottom)end;return D:ccCompat()end;function s:scroll(w,E)local F=self.currentScroll;local G=self.currentScroll+E;if E<0 then self.currentScroll=math.max(0,G)else self.currentScroll=math.min(self.maxScroll,G)end;if self.currentScroll~=F then local H=f.FrameScrollEvent(w,self.id,F,self.currentScroll)os.queueEvent(H.name,H)end end;function s:renderScrollBar(w,n,o,I,l)local t=d.Anchor(n,l)if self.border>0 then t.x=t.x-1;t.y=t.y+1;I=I-2 end;self.maxScroll=o-I;local J=I-2;local K=math.max(1,math.floor(I/o*J))local L=1;if self.maxScroll>0 then L=math.floor(self.currentScroll/self.maxScroll*J)L=math.min(J-K,L)L=math.max(0,L)end;local M=d.Anchor(1,l+L)local N=self;local O=self.id..".scrollBar"local P=self.id..".scrollUp"local Q=self.id..".scrollDown"if self.scrollFrame==nil then local R=require("am.ui.elements.button")self.scrollFrame=s(t,{id=self.id..".scrollFrame",width=1,height=I,border=0,fillColor=self.scrollBarTrackColor})local S=R(d.TopLeft(),"\x1e",{id=P,fillColor=self.scrollBarDisabledColor,textColor=self.scrollBarTextColor,border=0,disabled=true,padLeft=0})S:addActivateHandler(function()N:scroll(w,-1)end)local T=R(d.BottomLeft(),"\x1f",{id=Q,fillColor=self.scrollBarButtonColor,textColor=self.scrollBarTextColor,border=0,padLeft=0})T:addActivateHandler(function()N:scroll(w,1)end)local U=s(M,{id=O,width=1,height=K,border=0,fillColor=self.scrollBarColor})self.scrollFrame:add(S)self.scrollFrame:add(T)self.scrollFrame:add(U)else self.scrollFrame.anchor=t;self.scrollFrame.height=I;self.scrollFrame.fillColor=self.scrollBarTrackColor;local V=self.scrollFrame.i[P]V.disabled=self.currentScroll==0;if V.disabled then V.fillColor=self.scrollBarDisabledColor else V.fillColor=self.scrollBarButtonColor end;local W=self.scrollFrame.i[Q]W.disabled=self.currentScroll==self.maxScroll;if W.disabled then W.fillColor=self.scrollBarDisabledColor else W.fillColor=self.scrollBarButtonColor end;local U=self.scrollFrame.i[O]U.height=K;U.fillColor=self.scrollBarColor;U.anchor=M end;self.scrollFrame:render(w)end;function s:render(w)if not self.visible then return end;a.expect(1,w,"table","nil")if w==nil then w=term end;self:validate(w)local X=w.getTextColor()local Y=w.getBackgroundColor()local Z,a0=w.getCursorPos()local m=self.anchor:getPos(w,self:getBaseWidth(),self:getBaseHeight())local n=self:getWidth(w,m.x)local o=self:getHeight(w,m.y)local a1=self:getBackgroundColor(w)local a2=self:getBorderColor(w)local a3=self:getTextColor(w)local I=o;if self.scrollBar then local _,B=w.getSize()I=math.min(I,B-m.y+1)end;local K=o-self.padTop-self.padBottom;if self.border>0 then K=K-2;if self:getBackgroundColor()~=nil or self:getBorderColor()~=nil then if self.border==1 then g.renderBorder1(w,m,n,I,a1,a2)elseif self.border==2 then g.renderBorder2(w,m,n,I,a1,a2)else g.renderBorder3(w,m,n,I,a2)end end end;w.setTextColor(a3)w.setBackgroundColor(g.getColor(self:getFillColor(w),Y))local D=self:makeScreen(w,m,n,o,false)if self:getFillColor()~=nil then D.clear()end;g.getFrameScreen(D):addPadding(self.padLeft,self.padRight,self.padTop,self.padBottom)if self.scrollBar then K=K+self.padTop+self.padBottom;self:renderScrollBar(w,n,K,I,m.y)end;s.super.render(self,D)w.setTextColor(X)w.setBackgroundColor(Y)w.setCursorPos(Z,a0)end;function s:within(w,q,r)if not self.visible then return false end;a.expect(1,w,"table")g.requireOutput(w)a.expect(2,q,"number")a.expect(3,r,"number")a.range(q,1)a.range(r,1)self:validate(w)local a4=self.anchor:getPos(w,self:getBaseWidth(),self:getBaseHeight())if g.isFrameScreen(w)then local a5=g.getFrameScreen(w)a4=c.ScreenPos(a5:toAbsolutePos(a4.x,a4.y))end;local n=self:getWidth(w,a4.x)local o=self:getHeight(w,a4.y)local a6=c.ScreenPos(a4.x+n-1,a4.y+o-1)return q>=a4.x and q<=a6.x and r>=a4.y and r<=a6.y end;function s:handle(w,H,...)local H,a7=b.cleanEventArgs(H,...)a.expect(1,w,"table")a.expect(2,H,"string")g.requireOutput(w)if H==e.e.Events.frame_scroll and a7[1].objId==self.id then if self.scrollBar then self.currentScroll=a7[1].newScroll;self:render(w)end;return true elseif self.scrollBar then if self.scrollFrame~=nil then if H~="mouse_scroll"then if self.scrollFrame:handle(w,{H,unpack(a7)})then return true end end end end;local D=self:makeScreen(w)for _,a8 in pairs(self.i)do if a8:handle(D,{H,unpack(a7)})then return true end end;local a9={mouse_click=true,mouse_up=true,monitor_touch=true,mouse_scroll=true}if a9[H]then local m;if a7[2]>0 and a7[3]>0 then m=c.ScreenPos(a7[2],a7[3])end;local aa=nil;if H=="mouse_scroll"or m~=nil and self:within(w,m.x,m.y)then local ab=false;if H=="mouse_scroll"then if self.scrollBar then if m==nil or self:within(w,m.x,m.y)then local ac=a7[1]if ac==0 then ac=-1 end;self:scroll(w,ac)end end;return false else local a5=g.getFrameScreen(D)local q,r=a5:toRealtivePos(m.x,m.y)local ad=a5:getClickArea(q,r,self.padLeft,self.padRight,self.padTop,self.padBottom)if H=="mouse_click"and self.visible then ab=true;aa=f.FrameClickEvent(w,self.id,q,r,ad,a7[1])elseif H=="mouse_up"then aa=f.FrameDeactivateEvent(w,self.id,q,r,ad,a7[1])elseif H=="monitor_touch"and self.visible then ab=true;aa=f.FrameTouchEvent(w,self.id,q,r,ad)end;if aa~=nil then os.queueEvent(aa.name,aa)end end;return ab end end;return false end;function s:bind(w)return j(w,self)end;return s,j
