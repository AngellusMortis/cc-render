local a=require("cc.expect")require(settings.get("ghu.base").."core/apis/ghu")local b=require("am.core")local c=require("am.ui.base")local d=require("am.ui.anchor")local e=require("am.ui.const")local f=require("am.ui.event")local g=require("am.ui.helpers")local h=require("am.ui.elements.group")local i=h.Bound:extend("am.ui.BoundFrame")function i:getBackgroundColor()return self.obj:getBackgroundColor(self.output)end;function i:getFillColor()return self.obj:getFillColor(self.output)end;function i:getBorderColor()return self.obj:getBorderColor(self.output)end;function i:getTextColor()return self.obj:getTextColor(self.output)end;function i:getBaseWidth()return self.obj:getBaseWidth()end;function i:getWidth(j)return self.obj:getWidth(self.output,j)end;function i:getBaseHeight()return self.obj:getBaseHeight()end;function i:getHeight(k)return self.obj:getHeight(self.output,k)end;function i:makeScreen(l,m,n,o)return self.obj:makeScreen(self.output,l,m,n,o)end;function i:within(p,q)return self.obj:within(self.output,p,q)end;local r=h:extend("am.ui.Frame")r.Bound=i;function r:init(s,t)t=t or{}a.expect(1,s,"table")a.field(t,"id","string","nil")a.field(t,"width","number","nil")a.field(t,"height","number","nil")a.field(t,"fillHorizontal","boolean","nil")a.field(t,"fillVertical","boolean","nil")a.field(t,"padLeft","number","nil")a.field(t,"padRight","number","nil")a.field(t,"padTop","number","nil")a.field(t,"padBottom","number","nil")a.field(t,"backgroundColor","number","nil")a.field(t,"borderColor","number","nil")a.field(t,"fillColor","number","nil")a.field(t,"textColor","number","nil")a.field(t,"border","number","nil")a.field(t,"scrollBar","boolean","nil")a.field(t,"scrollBarTrackColor","number","nil")a.field(t,"scrollBarColor","number","nil")a.field(t,"scrollBarButtonColor","number","nil")a.field(t,"scrollBarTextColor","number","nil")a.field(t,"scrollBarDisabledColor","number","nil")r.super.init(self,t)if t.fillHorizontal==nil then t.fillHorizontal=false end;if t.fillVertical==nil then t.fillVertical=false end;if t.padding==nil then t.padding=1 end;if t.borderColor==nil then t.borderColor=colors.gray end;if t.border==nil then t.border=1 end;if t.padLeft==nil then t.padLeft=0 end;if t.padRight==nil then t.padRight=t.padLeft end;if t.padTop==nil then t.padTop=math.max(0,t.padLeft-1)end;if t.padBottom==nil then t.padBottom=t.padTop end;if t.scrollBar==nil then t.scrollBar=false end;if t.scrollBarTrackColor==nil then t.scrollBarTrackColor=colors.lightGray end;if t.scrollBarColor==nil then t.scrollBarColor=colors.gray end;if t.scrollBarButtonColor==nil then t.scrollBarButtonColor=t.scrollBarColor end;if t.scrollBarTextColor==nil then t.scrollBarTextColor=t.scrollBarTrackColor end;if t.scrollBarDisabledColor==nil then t.scrollBarDisabledColor=colors.black end;self.anchor=s;self.width=t.width;self.height=t.height;self.fillHorizontal=t.fillHorizontal;self.fillVertical=t.fillVertical;self.padLeft=t.padLeft;self.padRight=t.padRight;self.padTop=t.padTop;self.padBottom=t.padBottom;self.backgroundColor=t.backgroundColor;self.borderColor=t.borderColor;self.fillColor=t.fillColor;self.textColor=t.textColor;self.border=t.border;self.scrollBar=t.scrollBar;self.scrollBarTrackColor=t.scrollBarTrackColor;self.scrollBarColor=t.scrollBarColor;self.scrollBarButtonColor=t.scrollBarButtonColor;self.scrollBarTextColor=t.scrollBarTextColor;self.scrollBarDisabledColor=t.scrollBarDisabledColor;if self.scrollBar then self.currentScroll=0 else self.currentScroll=-1 end;self.maxScroll=0;self:validate()return self end;function r:get(u,v)a.expect(1,u,"string")a.expect(2,v,"table","nil")local w=b.split(u,".")local x=w[1]for y=2,#w-1,1 do x=x.."."..w[y]end;if x==self.id then return self:bind(v)end;if v~=nil then g.requireOutput(v)v=self:makeScreen(v)end;return r.super.get(self,u,v)end;function r:validate(v)a.field(self,"border","number")a.range(self.border,0,3)a.field(self,"anchor","table")if not g.isAnchor(self.anchor)then error("anchor much be of type Anchor")end;a.field(self,"width","number","nil")if self.width~=nil then a.range(self.width,1)end;a.field(self,"height","number","nil")if self.height~=nil then if self.border>0 then a.range(self.height,3)else a.range(self.height,1)end end;if self.backgroundColor~=nil then a.field(self,"backgroundColor","number")a.range(self.backgroundColor,1)end;if self.fillColor~=nil then a.field(self,"fillColor","number")a.range(self.fillColor,1)end;if self.borderColor~=nil then a.field(self,"borderColor","number")a.range(self.borderColor,1)end;if self.textColor~=nil then a.field(self,"textColor","number")a.range(self.textColor,1)end;if self.scrollBar and self.height==nil then error(string.format("frame (%s) cannot have nil height with a scrollBar"))end end;function r:getBackgroundColor(v)a.expect(1,v,"table","nil")if v~=nil then g.requireOutput(v)return g.getColor(self.backgroundColor,v.getBackgroundColor())end;return self.backgroundColor end;function r:getFillColor(v)return self.fillColor end;function r:getBorderColor(v)a.expect(1,v,"table","nil")if v~=nil then g.requireOutput(v)g.getColor(self.borderColor,v.getBackgroundColor())end;return self.borderColor end;function r:getTextColor(v)a.expect(1,v,"table","nil")if v~=nil then g.requireOutput(v)return g.getColor(self.textColor,v.getTextColor())end;return self.textColor end;function r:getBaseWidth()local m=self.width;if m~=nil then return m end;m=1+self.padLeft+self.padRight;if self.border>0 then m=m+2 end;return m end;function r:getWidth(v,j)a.expect(2,j,"number","nil")if j==nil then j=self.anchor:getXPos(v,self:getBaseWidth())end;local m=self:getBaseWidth()if self.fillHorizontal and not(self.anchor:is(d.Right)or self.anchor:is(d.TopRight)or self.anchor:is(d.BottomRight))then local z,_=v.getSize()m=z-j+1 end;return m end;function r:getBaseHeight()local n=self.height;if n~=nil then return n end;n=1+self.padTop+self.padBottom;if self.border>0 then n=n+2 end;return n end;function r:getHeight(v,k)a.expect(2,k,"number","nil")local n=self:getBaseHeight()if self.fillVertical and not(self.anchor:is(d.Bottom)and self.anchor:is(d.BottomLeft)and self.anchor:is(d.BottomRight))then local _,A=v.getSize()n=A-k+1 end;return n end;function r:makeScreen(v,l,m,n,o)a.expect(1,v,"table")a.expect(2,l,"table","nil")a.expect(3,m,"number","nil")a.expect(4,n,"number","nil")a.expect(5,o,"boolean","nil")g.requireOutput(v)if l==nil then l=self.anchor:getPos(v,self:getBaseWidth(),self:getBaseHeight())else l=b.copy(l)end;if o==nil then o=true end;if not g.isPos(l)then error("pos must be a ScreenPos")end;if m==nil then m=self:getWidth(v,l.x)end;if n==nil then n=self:getHeight(v,l.y)end;local B=-1;if self.scrollBar then _,B=v.getSize()end;if self.border>0 then m=m-2;n=n-2;l.x=l.x+1;l.y=l.y+1;B=B-2 end;if self.scrollBar then m=m-1 end;local C=c.FrameScreen(v,self.id,b.copy(l),m,n,self:getTextColor(v),self:getFillColor(v),self.currentScroll,B)if o then C:addPadding(self.padLeft,self.padRight,self.padTop,self.padBottom)end;return C:ccCompat()end;function r:scroll(v,D)local E=self.currentScroll;local F=self.currentScroll+D;if D<0 then self.currentScroll=math.max(0,F)else self.currentScroll=math.min(self.maxScroll,F)end;if self.currentScroll~=E then local G=f.FrameScrollEvent(v,self.id,E,self.currentScroll)os.queueEvent(G.name,G)end end;function r:renderScrollBar(v,m,n,H,k)local s=d.Anchor(m,k)if self.border>0 then s.x=s.x-1;s.y=s.y+1;H=H-2 end;self.maxScroll=n-H;local I=H-2;local J=math.max(1,math.floor(H/n*I))local K=1;if self.maxScroll>0 then K=math.floor(self.currentScroll/self.maxScroll*I)K=math.min(I-J,K)K=math.max(0,K)end;local L=d.Anchor(1,k+K)local M=self;local N=self.id..".scrollBar"local O=self.id..".scrollUp"local P=self.id..".scrollDown"if self.scrollFrame==nil then local Q=require("am.ui.elements.button")self.scrollFrame=r(s,{id=self.id..".scrollFrame",width=1,height=H,border=0,fillColor=self.scrollBarTrackColor})local R=Q(d.TopLeft(),"\x1e",{id=O,fillColor=self.scrollBarDisabledColor,textColor=self.scrollBarTextColor,border=0,disabled=true,padLeft=0})R:addActivateHandler(function()M:scroll(v,-1)end)local S=Q(d.BottomLeft(),"\x1f",{id=P,fillColor=self.scrollBarButtonColor,textColor=self.scrollBarTextColor,border=0,padLeft=0})S:addActivateHandler(function()M:scroll(v,1)end)local T=r(L,{id=N,width=1,height=J,border=0,fillColor=self.scrollBarColor})self.scrollFrame:add(R)self.scrollFrame:add(S)self.scrollFrame:add(T)else self.scrollFrame.anchor=s;self.scrollFrame.height=H;self.scrollFrame.fillColor=self.scrollBarTrackColor;local U=self.scrollFrame.i[O]U.disabled=self.currentScroll==0;if U.disabled then U.fillColor=self.scrollBarDisabledColor else U.fillColor=self.scrollBarButtonColor end;local V=self.scrollFrame.i[P]V.disabled=self.currentScroll==self.maxScroll;if V.disabled then V.fillColor=self.scrollBarDisabledColor else V.fillColor=self.scrollBarButtonColor end;local T=self.scrollFrame.i[N]T.height=J;T.fillColor=self.scrollBarColor;T.anchor=L end;self.scrollFrame:render(v)end;function r:render(v)if not self.visible then return end;a.expect(1,v,"table","nil")if v==nil then v=term end;self:validate(v)local W=v.getTextColor()local X=v.getBackgroundColor()local Y,Z=v.getCursorPos()local l=self.anchor:getPos(v,self:getBaseWidth(),self:getBaseHeight())local m=self:getWidth(v,l.x)local n=self:getHeight(v,l.y)local a0=self:getBackgroundColor(v)local a1=self:getBorderColor(v)local a2=self:getTextColor(v)local H=n;if self.scrollBar then local _,A=v.getSize()H=math.min(H,A-l.y+1)end;local J=n-self.padTop-self.padBottom;if self.border>0 then J=J-2;if self:getBackgroundColor()~=nil or self:getBorderColor()~=nil then if self.border==1 then g.renderBorder1(v,l,m,H,a0,a1)elseif self.border==2 then g.renderBorder2(v,l,m,H,a0,a1)else g.renderBorder3(v,l,m,H,a1)end end end;v.setTextColor(a2)v.setBackgroundColor(g.getColor(self:getFillColor(v),X))local C=self:makeScreen(v,l,m,n,false)if self:getFillColor()~=nil then C.clear()end;g.getFrameScreen(C):addPadding(self.padLeft,self.padRight,self.padTop,self.padBottom)if self.scrollBar then J=J+self.padTop+self.padBottom;self:renderScrollBar(v,m,J,H,l.y)end;r.super.render(self,C)v.setTextColor(W)v.setBackgroundColor(X)v.setCursorPos(Y,Z)end;function r:within(v,p,q)if not self.visible then return false end;a.expect(1,v,"table")g.requireOutput(v)a.expect(2,p,"number")a.expect(3,q,"number")a.range(p,1)a.range(q,1)self:validate(v)local a3=self.anchor:getPos(v,self:getBaseWidth(),self:getBaseHeight())if g.isFrameScreen(v)then local a4=g.getFrameScreen(v)a3=c.ScreenPos(a4:toAbsolutePos(a3.x,a3.y))end;local m=self:getWidth(v,a3.x)local n=self:getHeight(v,a3.y)local a5=c.ScreenPos(a3.x+m-1,a3.y+n-1)return p>=a3.x and p<=a5.x and q>=a3.y and q<=a5.y end;function r:handle(v,G,...)local G,a6=b.cleanEventArgs(G,...)a.expect(1,v,"table")a.expect(2,G,"string")g.requireOutput(v)if G==e.e.Events.frame_scroll and a6[1].objId==self.id then if self.scrollBar then self.currentScroll=a6[1].newScroll;self:render(v)end;return true elseif self.scrollBar then if self.scrollFrame~=nil then if G~="mouse_scroll"then if self.scrollFrame:handle(v,{G,table.unpack(a6)})then return true end end end end;local C=self:makeScreen(v)for _,a7 in pairs(self.i)do if a7:handle(C,{G,table.unpack(a6)})then return true end end;local a8={mouse_click=true,mouse_up=true,monitor_touch=true,mouse_scroll=true}if a8[G]then local l;if a6[2]>0 and a6[3]>0 then l=c.ScreenPos(a6[2],a6[3])end;local a9=nil;if G=="mouse_scroll"or l~=nil and self:within(v,l.x,l.y)then local aa=false;if G=="mouse_scroll"then if self.scrollBar then if l==nil or self:within(v,l.x,l.y)then local ab=a6[1]if ab==0 then ab=-1 end;self:scroll(v,ab)end end;return false else local a4=g.getFrameScreen(C)local p,q=a4:toRealtivePos(l.x,l.y)local ac=a4:getClickArea(p,q,self.padLeft,self.padRight,self.padTop,self.padBottom)if G=="mouse_click"and self.visible then aa=true;a9=f.FrameClickEvent(v,self.id,p,q,ac,a6[1])elseif G=="mouse_up"then a9=f.FrameDeactivateEvent(v,self.id,p,q,ac,a6[1])elseif G=="monitor_touch"and self.visible then aa=true;a9=f.FrameTouchEvent(v,self.id,p,q,ac)end;if a9~=nil then os.queueEvent(a9.name,a9)end end;return aa end end;return false end;function r:bind(v)return i(v,self)end;return r
