local a=require("cc.expect")require(settings.get("ghu.base").."core/apis/ghu")local b=require("am.core")local c=require("am.text")local d=require("am.ui.base")local e=require("am.ui.bound")local f={}f.a=require("am.ui.anchor")f.c=require("am.ui.const")f.e=require("am.ui.event")f.h=require("am.ui.helpers")f.ScreenPos=d.ScreenPos;f.UIObject=d.UIObject;f.UILoop=require("am.ui.loop")local g=d.UIObject:extend("am.ui.Group")f.Group=g;function g:init(h)h=h or{}a.field(h,"id","string","nil")g.super.init(self,h)self.i={}return self end;function g:add(i)a.expect(1,i,"table")f.h.requireUIObject(i)if f.h.isUIScreen(i)then error("Cannot nest Screen UIs")end;self.i[i.id]=i end;function g:get(j,k)a.expect(1,j,"string")a.expect(2,k,"table","nil")if k~=nil then f.h.requireOutput(k)end;if self.i[j]~=nil then return self.i[j]:bind(k)end;for _,i in pairs(self.i)do if i:has(g)then local l=i:get(j,k)if l~=nil then return l end end end;return nil end;function g:remove(j)a.expect(1,j,"string")if self.i[j]~=nil then table.remove(self.i,j)return true end;for _,i in pairs(self.i)do if i:is(g)then local m=table.remove(i,j)if m then return true end end end;return false end;function g:reset()self.i={}end;function g:bind(k)return e.BoundGroup(k,self)end;function g:render(k)if not self.visible then return end;a.expect(1,k,"table","nil")if k==nil then k=term end;local n=k.getTextColor()local o=k.getBackgroundColor()local p,q=k.getCursorPos()g.super.render(self,k)for _,i in pairs(self.i)do i:render(k)end;k.setTextColor(n)k.setBackgroundColor(o)k.setCursorPos(p,q)end;function g:handle(k,r,...)local r,s=b.cleanEventArgs(r,...)a.expect(1,k,"table")a.expect(2,r,"string")f.h.requireOutput(k)if r=="term_resize"or r=="monitor_resize"then self:render(k)return false end;for _,i in pairs(self.i)do if i:handle(k,{r,unpack(s)})then return true end end;return false end;local t=g:extend("am.ui.Screen")f.Screen=t;function t:init(k,h)h=h or{}a.expect(1,k,"table","nil")a.field(h,"id","string","nil")a.field(h,"textColor","number","nil")a.field(h,"backgroundColor","number","nil")if k==nil then k=term end;f.h.requireOutput(k)if h.textColor~=nil then a.range(h.textColor,1)end;if h.backgroundColor~=nil then a.range(h.backgroundColor,1)end;t.super.init(self,h)self.output=k;self.textColor=h.textColor;self.backgroundColor=h.backgroundColor;return self end;function t:get(j)a.expect(1,j,"string")return t.super.get(self,j,self.output)end;function t:render()if not self.visible then return end;local _,u=self.output.getSize()local v=f.h.getColor(self.textColor,self.output.getTextColor())local w=f.h.getColor(self.backgroundColor,self.output.getBackgroundColor())self.output.setTextColor(v)self.output.setBackgroundColor(w)self.output.clear()self.output.setCursorPos(1,1)self.output.setCursorBlink(false)t.super.render(self,self.output)self.output.setCursorPos(1,u)self.output.setTextColor(v)self.output.setBackgroundColor(w)end;function t:handle(r,...)local r,s=b.cleanEventArgs(r,...)a.expect(1,r,"string")local k;if f.c.l.Events.Always[r]then k=self.output else k=f.h.getEventOutput({r,unpack(s)})if not f.c.l.Events.UI[r]and not f.h.isSameScreen(self.output,k)then return false end end;if f.c.l.Events.UI[r]then local i=self:get(s[1].objId)if i~=nil then if i:handle({r,unpack(s)})then return true end end;return false end;if r=="term_resize"or r=="monitor_resize"then self:render()return false end;for _,i in pairs(self.i)do if i:handle(k,{r,unpack(s)})then return true end end;return true end;function t:bind(k)return self end;local x=d.UIObject:extend("am.ui.Text")f.Text=x;function x:init(y,z,h)h=h or{}a.expect(1,y,"table")a.expect(2,z,"string","table")a.field(h,"id","string","nil")a.field(h,"textColor","number","nil")a.field(h,"backgroundColor","number","nil")if h.textColor~=nil then a.range(h.textColor,1)end;if h.backgroundColor~=nil then a.range(h.backgroundColor,1)end;x.super.init(self,h)self.label=z;self.anchor=y;self.textColor=h.textColor;self.backgroundColor=h.backgroundColor;self:validate()return self end;function x:validate(k)x.super.validate(self,k)a.field(self,"label","string","table")a.field(self,"anchor","table")a.field(self,"textColor","number","nil")a.field(self,"backgroundColor","number","nil")if not f.h.isAnchor(self.anchor)then error("anchor much be of type Anchor")end end;function x:handle(k,r,...)local r,s=b.cleanEventArgs(r,...)a.expect(1,k,"table")a.expect(2,r,"string")f.h.requireOutput(k)if f.c.l.Events.UI[r]and s[1].objId==self.id then if r==f.c.e.Events.text_update then local A=s[1].oldLabel;local B=s[1].newLabel;if#B<#A then self.label=string.rep(" ",#A)local o=self.backgroundColor;local n=self.textColor;self.backgroundColor=k.getBackgroundColor()self.textColor=k.getBackgroundColor()self:render(k)self.backgroundColor=o;self.textColor=n end;self.label=B;self:render(k)return true end end;return false end;function x:getLines()local C;if type(self.label)=="string"then C={self.label}else C=b.copy(self.label)end;local D=0;for E,F in ipairs(C)do local G,H=c.getTextColor(F)local I={text=G,color=H}if#G>D then D=#G end;C[E]=I end;return C,D end;function x:render(k)if not self.visible then return end;a.expect(1,k,"table","nil")if k==nil then k=term end;local n=k.getTextColor()local o=k.getBackgroundColor()local p,q=k.getCursorPos()x.super.render(self,k)local C,J=self:getLines()local K=self.anchor:getPos(k,J,#C)local w=f.h.getColor(self.backgroundColor,k.getBackgroundColor())for E=0,#C-1,1 do local F=C[E+1]local v=f.h.getColor(self.textColor,F.color,k.getTextColor())k.setTextColor(v)k.setBackgroundColor(w)k.setCursorPos(K.x,K.y+E)k.write(F.text)end;k.setTextColor(n)k.setBackgroundColor(o)k.setCursorPos(p,q)end;function x:update(k,z)a.expect(1,k,"table")a.expect(2,z,"string")f.h.requireOutput(k)if self.label~=z then local r=f.e.TextUpdateEvent(k,self.id,self.label,z)self.label=z;os.queueEvent(r.name,r)end end;function x:bind(k)return e.BoundText(k,self)end;local L=g:extend("am.ui.Frame")f.Frame=L;function L:init(y,h)h=h or{}a.expect(1,y,"table")a.field(h,"id","string","nil")a.field(h,"width","number","nil")a.field(h,"height","number","nil")a.field(h,"fillHorizontal","boolean","nil")a.field(h,"fillVertical","boolean","nil")a.field(h,"padLeft","number","nil")a.field(h,"padRight","number","nil")a.field(h,"padTop","number","nil")a.field(h,"padBottom","number","nil")a.field(h,"backgroundColor","number","nil")a.field(h,"borderColor","number","nil")a.field(h,"fillColor","number","nil")a.field(h,"textColor","number","nil")a.field(h,"border","number","nil")a.field(h,"scrollBar","boolean","nil")a.field(h,"scrollBarTrackColor","number","nil")a.field(h,"scrollBarColor","number","nil")a.field(h,"scrollBarButtonColor","number","nil")a.field(h,"scrollBarTextColor","number","nil")a.field(h,"scrollBarDisabledColor","number","nil")L.super.init(self,h)if h.fillHorizontal==nil then h.fillHorizontal=false end;if h.fillVertical==nil then h.fillVertical=false end;if h.padding==nil then h.padding=1 end;if h.borderColor==nil then h.borderColor=colors.gray end;if h.border==nil then h.border=1 end;if h.padLeft==nil then h.padLeft=0 end;if h.padRight==nil then h.padRight=h.padLeft end;if h.padTop==nil then h.padTop=math.max(0,h.padLeft-1)end;if h.padBottom==nil then h.padBottom=h.padTop end;if h.scrollBar==nil then h.scrollBar=false end;if h.scrollBarTrackColor==nil then h.scrollBarTrackColor=colors.lightGray end;if h.scrollBarColor==nil then h.scrollBarColor=colors.gray end;if h.scrollBarButtonColor==nil then h.scrollBarButtonColor=h.scrollBarColor end;if h.scrollBarTextColor==nil then h.scrollBarTextColor=h.scrollBarTrackColor end;if h.scrollBarDisabledColor==nil then h.scrollBarDisabledColor=colors.black end;self.anchor=y;self.width=h.width;self.height=h.height;self.fillHorizontal=h.fillHorizontal;self.fillVertical=h.fillVertical;self.padLeft=h.padLeft;self.padRight=h.padRight;self.padTop=h.padTop;self.padBottom=h.padBottom;self.backgroundColor=h.backgroundColor;self.borderColor=h.borderColor;self.fillColor=h.fillColor;self.textColor=h.textColor;self.border=h.border;self.scrollBar=h.scrollBar;self.scrollBarTrackColor=h.scrollBarTrackColor;self.scrollBarColor=h.scrollBarColor;self.scrollBarButtonColor=h.scrollBarButtonColor;self.scrollBarTextColor=h.scrollBarTextColor;self.scrollBarDisabledColor=h.scrollBarDisabledColor;if self.scrollBar then self.currentScroll=0 else self.currentScroll=-1 end;self.maxScroll=0;self:validate()return self end;function L:get(j,k)a.expect(1,j,"string")a.expect(2,k,"table","nil")local M=b.split(j,".")if M[1]==self.id then return self:bind(k)end;if k~=nil then f.h.requireOutput(k)k=self:makeScreen(k)end;return L.super.get(self,j,k)end;function L:validate(k)a.field(self,"border","number")a.range(self.border,0,3)a.field(self,"anchor","table")if not f.h.isAnchor(self.anchor)then error("anchor much be of type Anchor")end;a.field(self,"width","number","nil")if self.width~=nil then a.range(self.width,1)end;a.field(self,"height","number","nil")if self.height~=nil then if self.border>0 then a.range(self.height,3)else a.range(self.height,1)end end;if self.backgroundColor~=nil then a.field(self,"backgroundColor","number")a.range(self.backgroundColor,1)end;if self.fillColor~=nil then a.field(self,"fillColor","number")a.range(self.fillColor,1)end;if self.borderColor~=nil then a.field(self,"borderColor","number")a.range(self.borderColor,1)end;if self.textColor~=nil then a.field(self,"textColor","number")a.range(self.textColor,1)end;if self.scrollBar and self.height==nil then error(string.format("frame (%s) cannot have nil height with a scrollBar"))end end;function L:getBackgroundColor(k)a.expect(1,k,"table","nil")if k~=nil then f.h.requireOutput(k)return f.h.getColor(self.backgroundColor,k.getBackgroundColor())end;return self.backgroundColor end;function L:getFillColor(k)return self.fillColor end;function L:getBorderColor(k)a.expect(1,k,"table","nil")if k~=nil then f.h.requireOutput(k)f.h.getColor(self.borderColor,k.getBackgroundColor())end;return self.borderColor end;function L:getTextColor(k)a.expect(1,k,"table","nil")if k~=nil then f.h.requireOutput(k)return f.h.getColor(self.textColor,k.getTextColor())end;return self.textColor end;function L:getBaseWidth()local J=self.width;if J~=nil then return J end;J=1+self.padLeft+self.padRight;if self.border>0 then J=J+2 end;return J end;function L:getWidth(k,N)a.expect(2,N,"number","nil")if N==nil then N=self.anchor:getXPos(k,self:getBaseWidth())end;local J=self:getBaseWidth()if self.fillHorizontal and not(self.anchor:is(f.a.Right)or self.anchor:is(f.a.TopRight)or self.anchor:is(f.a.BottomRight))then local O,_=k.getSize()J=O-N+1 end;return J end;function L:getBaseHeight()local u=self.height;if u~=nil then return u end;u=1+self.padTop+self.padBottom;if self.border>0 then u=u+2 end;return u end;function L:getHeight(k,P)a.expect(2,P,"number","nil")local u=self:getBaseHeight()if self.fillVertical and not(self.anchor:is(f.a.Bottom)and self.anchor:is(f.a.BottomLeft)and self.anchor:is(f.a.BottomRight))then local _,Q=k.getSize()u=Q-P+1 end;return u end;function L:makeScreen(k,K,J,u,R)a.expect(1,k,"table")a.expect(2,K,"table","nil")a.expect(3,J,"number","nil")a.expect(4,u,"number","nil")a.expect(5,R,"boolean","nil")f.h.requireOutput(k)if K==nil then K=self.anchor:getPos(k,self:getBaseWidth(),self:getBaseHeight())else K=b.copy(K)end;if R==nil then R=true end;if not f.h.isPos(K)then error("pos must be a ScreenPos")end;if J==nil then J=self:getWidth(k,K.x)end;if u==nil then u=self:getHeight(k,K.y)end;local S=-1;if self.scrollBar then _,S=k.getSize()end;if self.border>0 then J=J-2;u=u-2;K.x=K.x+1;K.y=K.y+1;S=S-2 end;if self.scrollBar then J=J-1 end;local T=d.FrameScreen(k,self.id,b.copy(K),J,u,self:getTextColor(k),self:getFillColor(k),self.currentScroll,S)if R then T:addPadding(self.padLeft,self.padRight,self.padTop,self.padBottom)end;return T:ccCompat()end;function L:scroll(k,U)local V=self.currentScroll;local W=self.currentScroll+U;if U<0 then self.currentScroll=math.max(0,W)else self.currentScroll=math.min(self.maxScroll,W)end;if self.currentScroll~=V then local r=f.e.FrameScrollEvent(k,self.id,V,self.currentScroll)os.queueEvent(r.name,r)end end;function L:renderScrollBar(k,J,u)local y=f.a.Anchor(J,1)local _,Q=k.getSize()if self.border>0 then y.x=y.x-1;y.y=y.y+1;Q=Q-2 end;self.maxScroll=u-Q;local X=Q-2;local Y=math.max(1,math.floor(Q/u*X))local Z=1;if self.maxScroll>0 then Z=math.floor(self.currentScroll/self.maxScroll*X)Z=math.min(X-Y,Z)Z=math.max(0,Z)end;local a0=f.a.Anchor(1,2+Z)local a1=self;local a2=self.id..".scrollBar"local a3=self.id..".scrollUp"local a4=self.id..".scrollDown"if self.scrollFrame==nil then self.scrollFrame=f.Frame(y,{id=self.id..".scrollFrame",width=1,height=Q,border=0,fillColor=self.scrollBarTrackColor})local a5=f.Button(f.a.TopLeft(),"^",{id=a3,fillColor=self.scrollBarDisabledColor,textColor=self.scrollBarTextColor,border=0,disabled=true,padLeft=0})a5:addActivateHandler(function()log.debug(string.format("upOutput %s",f.h.isTerm(k)))a1:scroll(k,-1)end)local a6=f.Button(f.a.BottomLeft(),"v",{id=a4,fillColor=self.scrollBarButtonColor,textColor=self.scrollBarTextColor,border=0,padLeft=0})a6:addActivateHandler(function()log.debug(string.format("downOutput %s",f.h.isTerm(k)))a1:scroll(k,1)end)local a7=f.Frame(a0,{id=a2,width=1,height=Y,border=0,fillColor=self.scrollBarColor})self.scrollFrame:add(a5)self.scrollFrame:add(a6)self.scrollFrame:add(a7)else self.scrollFrame.anchor=y;self.scrollFrame.height=Q;self.scrollFrame.fillColor=self.scrollBarTrackColor;local a8=self.scrollFrame.i[a3]a8.disabled=self.currentScroll==0;if a8.disabled then a8.fillColor=self.scrollBarDisabledColor else a8.fillColor=self.scrollBarButtonColor end;local a9=self.scrollFrame.i[a4]a9.disabled=self.currentScroll==self.maxScroll;if a9.disabled then a9.fillColor=self.scrollBarDisabledColor else a9.fillColor=self.scrollBarButtonColor end;local a7=self.scrollFrame.i[a2]a7.height=Y;a7.fillColor=self.scrollBarColor;a7.anchor=a0 end;self.scrollFrame:render(k)end;function L:render(k)if not self.visible then return end;a.expect(1,k,"table","nil")if k==nil then k=term end;self:validate(k)local n=k.getTextColor()local o=k.getBackgroundColor()local p,q=k.getCursorPos()local K=self.anchor:getPos(k,self:getBaseWidth(),self:getBaseHeight())local J=self:getWidth(k,K.x)local u=self:getHeight(k,K.y)local w=self:getBackgroundColor(k)local aa=self:getBorderColor(k)local v=self:getTextColor(k)local Y=u-self.padTop-self.padBottom;if self.border>0 then Y=Y-2;if self:getBackgroundColor()~=nil or self:getBorderColor()~=nil then local ab=u;if self.scrollBar then local _,Q=k.getSize()ab=math.min(ab,Q)end;if self.border==1 then f.h.renderBorder1(k,K,J,ab,w,aa)elseif self.border==2 then f.h.renderBorder2(k,K,J,ab,w,aa)else f.h.renderBorder3(k,K,J,ab,aa)end end end;k.setTextColor(v)k.setBackgroundColor(f.h.getColor(self:getFillColor(k),o))local T=self:makeScreen(k,K,J,u,false)if self:getFillColor()~=nil then T.clear()end;f.h.getFrameScreen(T):addPadding(self.padLeft,self.padRight,self.padTop,self.padBottom)if self.scrollBar then Y=Y+self.padTop+self.padBottom;self:renderScrollBar(k,J,Y)end;L.super.render(self,T)k.setTextColor(n)k.setBackgroundColor(o)k.setCursorPos(p,q)end;function L:within(k,ac,ad)if not self.visible then return false end;a.expect(1,k,"table")f.h.requireOutput(k)a.expect(2,ac,"number")a.expect(3,ad,"number")a.range(ac,1)a.range(ad,1)self:validate(k)local ae=self.anchor:getPos(k,self:getBaseWidth(),self:getBaseHeight())if f.h.isFrameScreen(k)then k=f.h.getFrameScreen(k)ae=d.ScreenPos(k:toAbsolutePos(ae.x,ae.y))end;local J=self:getWidth(k,ae.x)local u=self:getHeight(k,ae.y)local af=d.ScreenPos(ae.x+J-1,ae.y+u-1)return ac>=ae.x and ac<=af.x and ad>=ae.y and ad<=af.y end;function L:handle(k,r,...)local r,s=b.cleanEventArgs(r,...)a.expect(1,k,"table")a.expect(2,r,"string")f.h.requireOutput(k)if f.c.l.Events.UI[r]then log.debug(string.format("%s: %s %s",self.id,r,s[1].objId))end;local T=nil;if r==f.c.e.Events.frame_scroll and s[1].objId==self.id then if self.scrollBar then self.currentScroll=s[1].newScroll;self:render(k)end;return true elseif self.scrollBar then if self.scrollFrame~=nil then if r~="mouse_scroll"then if self.scrollFrame:handle(k,{r,unpack(s)})then return true end end end end;local T=self:makeScreen(k)for _,i in pairs(self.i)do if i:handle(T,{r,unpack(s)})then return true end end;local ag={mouse_click=true,mouse_up=true,monitor_touch=true,mouse_scroll=true}if ag[r]then local K;if s[2]>0 and s[3]>0 then K=d.ScreenPos(s[2],s[3])end;local ah=nil;if s[2]==0 and s[3]==0 or self:within(k,K.x,K.y)then if r=="mouse_scroll"then if self.scrollBar then local ai=s[1]if ai==0 then ai=-1 end;log.debug(string.format("eventOutput %s",f.h.isTerm(k)))self:scroll(k,ai)end;return false else local aj=f.h.getFrameScreen(T)local ac,ad=aj:toRealtivePos(K.x,K.y)local ak=aj:getClickArea(ac,ad,self.padLeft,self.padRight,self.padTop,self.padBottom)if r=="mouse_click"then ah=f.e.FrameClickEvent(k,self.id,ac,ad,ak,s[1])elseif r=="mouse_up"then ah=f.e.FrameDeactivateEvent(k,self.id,ac,ad,ak,s[1])elseif r=="monitor_touch"then ah=f.e.FrameTouchEvent(k,self.id,ac,ad,ak)end;if ah~=nil then os.queueEvent(ah.name,ah)end end;return true end end;return false end;function L:bind(k)return e.BoundFrame(k,self)end;local al=L:extend("am.ui.Button")f.Button=al;function al:init(y,z,h)h=h or{}a.expect(1,y,"table")a.expect(2,z,"string")a.field(h,"labelAnchor","table","nil")a.field(h,"disabled","boolean","nil")a.field(h,"activateOnTouch","boolean","nil")a.field(h,"activateOnLeftClick","boolean","nil")a.field(h,"activateOnRightClick","boolean","nil")a.field(h,"activateOnMiddleClick","boolean","nil")if h.labelAnchor==nil then h.labelAnchor=f.a.Middle()end;if h.padLeft==nil then h.padLeft=1 end;if h.disabled==nil then h.disabled=false end;if h.activateOnTouch==nil then h.activateOnTouch=true end;if h.activateOnLeftClick==nil then h.activateOnLeftClick=true end;if h.activateOnRightClick==nil then h.activateOnRightClick=true end;if h.activateOnMiddleClick==nil then h.activateOnMiddleClick=true end;al.super.init(self,y,h)self.label=x(h.labelAnchor,z,{id=string.format("%s.label",self.id)})self.disabled=h.disabled;self.activated=false;self.activateOnTouch=h.activateOnTouch;self.activateOnLeftClick=h.activateOnLeftClick;self.activateOnRightClick=h.activateOnRightClick;self.activateOnMiddleClick=h.activateOnMiddleClick;self.activateHandlers={}self.touchTimer=nil;self:add(self.label)self:validate()return self end;function al:updateLabel(k,z)k=self:makeScreen(k)self.label:update(k,z)end;function al:getBaseWidth()local J=al.super.getBaseWidth(self)if self.width~=nil then return J end;return J+#self.label.label-1 end;function al:getFillColor(k)a.expect(1,k,"table","nil")if k~=nil and self.activated then f.h.requireOutput(k)f.h.getColor(self.borderColor,k.getBackgroundColor())end;if self.activated then return self.borderColor end;return self.fillColor end;function al:getBorderColor(k)a.expect(1,k,"table","nil")if k~=nil and not self.activated then f.h.requireOutput(k)f.h.getColor(self.borderColor,k.getBackgroundColor())end;if self.activated then return self.fillColor end;return self.borderColor end;function al:activate(k,am)if self.disabled or self.activated then return end;a.expect(2,am,"boolean","nil")self.activated=true;local r=f.e.ButtonActivateEvent(k,self.id,am)os.queueEvent(r.name,r)end;function al:deactivate(k)if not self.activated then return end;self.activated=false;local r=f.e.ButtonDeactivateEvent(k,self.id)os.queueEvent(r.name,r)end;function al:addActivateHandler(an)a.expect(1,an,"function")local j=tostring(an)self.activateHandlers[j]=an;return function()self.activateHandlers[j]=nil end end;function al:onActivate(k,r)if self.disabled then return end;self.activated=true;for _,an in pairs(self.activateHandlers)do an(self,k,r)end;self:render(k)if r.touch then self.touchTimer=os.startTimer(0.5)end end;function al:onDeactivate(k,r)self.activated=false;self:render(k)end;function al:onTouch(k,r)if self.disabled or self.activated or not self.activateOnTouch then return end;self:activate(k,true)end;function al:onClick(k,r)if self.disabled or self.activated then return end;if r.clickType==f.c.Click.Left and self.activateOnLeftClick then self:activate(k)elseif r.clickType==f.c.Click.Right and self.activateOnRightClick then self:activate(k)elseif r.clickType==f.c.Click.Middle and self.activateOnMiddleClick then self:activate(k)end end;function al:onUp(k,r)if self.disabled or not self.activated then return end;self:deactivate(k)end;function al:get(j,k)a.expect(1,j,"string")a.expect(2,k,"table","nil")if j==self.label.id then return self:bind(k)end;if k~=nil then f.h.requireOutput(k)k=self:makeScreen(k)end;return L.super.get(self,j,k)end;function al:handle(k,r,...)local r,s=b.cleanEventArgs(r,...)a.expect(1,k,"table")a.expect(2,r,"string")f.h.requireOutput(k)if f.c.l.Events.UI[r]then local ao=s[1]if ao.objId==self.id then if r==f.c.e.Events.frame_touch then self:onTouch(k,ao)elseif r==f.c.e.Events.frame_click then self:onClick(k,ao)elseif r==f.c.e.Events.frame_up then self:onUp(k,ao)elseif r==f.c.e.Events.button_activate then self:onActivate(k,ao)elseif r==f.c.e.Events.button_deactivate then self:onDeactivate(k,ao)end elseif r==f.c.e.Events.text_update then if ao.objId==self.label.id then local A=ao.oldLabel;local B=ao.newLabel;if#B<#A then local o=self.backgroundColor;local ap=self.borderColor;local aq=self.fillColor;self.backgroundColor=k.getBackgroundColor()self.borderColor=k.getBackgroundColor()self.fillColor=k.getBackgroundColor()self.label.label=string.rep(" ",#A)self:render(k)self.backgroundColor=o;self.borderColor=ap;self.fillColor=aq end;self.label.label=B;self:render(k)return true end end;return ao.objId==self.id or ao.objId==self.label.id elseif r=="timer"then if s[1]==self.touchTimer then self.touchTimer=nil;self:deactivate(k)end end;return al.super.handle(self,k,{r,unpack(s)})end;function al:bind(k)return e.BoundButton(k,self)end;local ar=L:extend("am.ui.ProgressBar")f.ProgressBar=ar;function ar:init(y,h)h=h or{}a.expect(1,y,"table")a.field(h,"label","string","nil")a.field(h,"labelAnchor","table","nil")a.field(h,"current","number","nil")a.field(h,"total","number","nil")a.field(h,"displayTotal","number","nil")a.field(h,"progressColor","number","nil")a.field(h,"progressTextColor","number","nil")a.field(h,"progressVertical","boolean","nil")a.field(h,"showProgress","boolean","nil")a.field(h,"showPercent","boolean","nil")if h.label==nil then h.label=""end;if h.labelAnchor==nil then h.labelAnchor=f.a.TopLeft()end;if h.total==nil then h.total=100 end;if h.current==nil then h.current=0 end;if h.progressColor==nil then h.progressColor=colors.green end;if h.progressTextColor==nil then h.progressTextColor=h.textColor end;if h.showProgress==nil then h.showProgress=true end;if h.showPercent==nil then h.showPercent=true end;if h.progressVertical==nil then h.progressVertical=false end;if h.fillHorizontal==nil then h.fillHorizontal=true end;if h.fillVertical==nil then if h.progressVertical then h.fillVertical=true end end;al.super.init(self,y,h)self.baseLabel=h.label;self.current=h.current;self.displayTotal=h.displayTotal;self.total=h.total;self.progressColor=h.progressColor;self.progressTextColor=h.progressTextColor;self.progressVertical=h.progressVertical;self.showProgress=h.showProgress;self.showPercent=h.showPercent;self.label=x(h.labelAnchor,self:getLabelText(),{id=string.format("%s.label",self.id)})self.fillFrame=L(f.a.BottomLeft(),{id=string.format("%s.fill",self.id),fillVertical=true,border=0})self.fillLabel=x(f.a.Anchor(1,1),self:getLabelText(),{id=string.format("%s.fillLabel",self.id)})self:add(self.label)self:validate()return self end;function ar:validate(k)ar.super.validate(self,k)if self.fillFrame==nil then return end;a.field(self,"baseLabel","string")a.field(self,"current","number")a.range(self.current,0)a.field(self,"total","number")a.range(self.total,math.floor(self.current))a.field(self,"displayTotal","number","nil")a.field(self,"progressColor","number")a.range(self.progressColor,1)a.field(self,"showPercent","boolean")a.field(self,"showProgress","boolean")self.padLeft=0;self.padRight=0;self.padTop=0;self.padBottom=0 end;function ar:bind(k)return e.BoundProgressBar(k,self)end;function ar:get(j,k)a.expect(1,j,"string")a.expect(2,k,"table","nil")if j==self.label.id or j==self.fillFrame.id or j==self.fillLabel.id then return self:bind(k)end;if k~=nil then f.h.requireOutput(k)k=self:makeScreen(k)end;return L.super.get(self,j,k)end;function ar:getLabelText()local z=self.baseLabel;local as=math.min(self.current,self.total)local at=as/self.total;if self.showPercent then z=z..string.format(" %d%%",at*100)end;if self.showProgress then local au=self.current;local av=self.total;if self.displayTotal~=nil then au=math.floor(at*self.displayTotal)av=self.displayTotal end;z=z..string.format(" [%d/%d]",au,av)end;return z end;function ar:render(k)if not self.visible then return end;a.expect(1,k,"table","nil")if k==nil then k=term end;local aw=self:makeScreen(k)local n=k.getTextColor()local o=k.getBackgroundColor()local p,q=k.getCursorPos()local z=self:getLabelText()self.label.label=z;self.label.textColor=self:getTextColor(k)ar.super.render(self,k)local as=math.min(self.current,self.total)local at=as/self.total;local ax,ay=aw.getSize()local az=self.label.anchor:getPos(aw,#z,1)local aA;if self.progressVertical then aA=math.floor(ay*at)else aA=math.floor(ax*at)end;if aA>0 then self.fillLabel.label=z;self.fillLabel.textColor=self.progressTextColor;local aB=false;if self.progressVertical then az.y=az.y-(ay-aA)if az.y>0 then aB=true end;self.fillFrame.width=ax;self.fillFrame.height=aA;self.fillFrame.fillVertical=false;self.fillFrame.fillHorizontal=true else if az.x<=aA then aB=true end;self.fillFrame.width=aA;self.fillFrame.height=ay;self.fillFrame.fillVertical=true;self.fillFrame.fillHorizontal=false end;if aB then self.fillLabel.anchor.x=az.x;self.fillLabel.anchor.y=az.y;self.fillFrame:add(self.fillLabel)else self.fillFrame:reset()end;self.fillFrame.fillColor=self.progressColor;self.fillFrame:render(aw)end;k.setTextColor(n)k.setBackgroundColor(o)k.setCursorPos(p,q)end;function ar:updateLabel(k,z,aC,aD)a.expect(1,k,"table")a.expect(2,z,"string","nil")a.expect(3,aC,"boolean","nil")a.expect(4,aD,"boolean","nil")f.h.requireOutput(k)local aE=z~=nil and self.baseLabel~=z;local aF=aC~=nil and self.showProgress~=aC;local aG=aD~=nil and self.showPercent~=aD;if not(aE or aF or aG)then return end;local r=f.e.ProgressBarLabelUpdateEvent(k,self.id)if aE then r.oldLabel=self.baseLabel;r.newLabel=z;self.baseLabel=z end;if aF then r.oldShowProgress=self.showProgress;r.newShowProgress=aC;self.showProgress=aC end;if aG then r.oldShowPercent=self.showPercent;r.newShowPercent=aD;self.showPercent=aD end;os.queueEvent(r.name,r)end;function ar:update(k,as)a.expect(1,k,"table")a.expect(2,as,"number")f.h.requireOutput(k)as=math.min(self.total,math.max(0,as))if self.current==as then return end;local r=f.e.ProgressBarUpdateEvent(k,self.id,self.current,as)self.current=as;os.queueEvent(r.name,r)end;function ar:handle(k,r,...)local r,s=b.cleanEventArgs(r,...)a.expect(1,k,"table")a.expect(2,r,"string")f.h.requireOutput(k)if r==f.c.e.Events.progress_label_update and s[1].objId==self.id then if s[1].newLabel~=nil then self.baseLabel=s[1].newLabel elseif s[1].newShowProgress~=nil then self.showProgress=s[1].newShowProgress elseif s[1].newShowPercent~=nil then self.showPercent=s[1].newShowPercent end;self:render(k)return true elseif r==f.c.e.Events.progress_update and s[1].objId==self.id then self.current=math.min(self.total,math.max(0,s[1].newCurrent))self:render(k)return true end;ar.super.handle(self,k,{r,unpack(s)})return false end;return f
