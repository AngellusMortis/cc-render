local a=require("cc.expect")require(settings.get("ghu.base").."core/apis/ghu")local b=require("am.core")local c=require("am.text")local d=require("am.ui.base")local e=require("am.ui.bound")local f={}f.a=require("am.ui.anchor")f.c=require("am.ui.const")f.e=require("am.ui.event")f.h=require("am.ui.helpers")f.ScreenPos=d.ScreenPos;f.UIObject=d.UIObject;f.UILoop=require("am.ui.loop")local g=d.UIObject:extend("am.ui.Group")f.Group=g;function g:init(h)h=h or{}a.field(h,"id","string","nil")g.super.init(self,h)self.i={}return self end;function g:add(i)a.expect(1,i,"table")f.h.requireUIObject(i)if f.h.isUIScreen(i)then error("Cannot nest Screen UIs")end;self.i[i.id]=i end;function g:get(j,k)a.expect(1,j,"string")a.expect(2,k,"table","nil")if k~=nil then f.h.requireOutput(k)end;if self.i[j]~=nil then return self.i[j]:bind(k)end;for _,i in pairs(self.i)do if i:has(g)then local l=i:get(j,k)if l~=nil then return l end end end;return nil end;function g:setVisible(m)a.expect(1,m,"boolean")self.visible=m;for _,i in pairs(self.i)do if i:has(g)then i:setVisible(m)else i.visible=m end end end;function g:remove(j)a.expect(1,j,"string")if self.i[j]~=nil then table.remove(self.i,j)return true end;for _,i in pairs(self.i)do if i:is(g)then local n=table.remove(i,j)if n then return true end end end;return false end;function g:reset()self.i={}end;function g:bind(k)return e.BoundGroup(k,self)end;function g:render(k)if not self.visible then return end;a.expect(1,k,"table","nil")if k==nil then k=term end;local o=k.getTextColor()local p=k.getBackgroundColor()local q,r=k.getCursorPos()g.super.render(self,k)for _,i in pairs(self.i)do i:render(k)end;k.setTextColor(o)k.setBackgroundColor(p)k.setCursorPos(q,r)end;function g:handle(k,s,...)local s,t=b.cleanEventArgs(s,...)a.expect(1,k,"table")a.expect(2,s,"string")f.h.requireOutput(k)if s=="term_resize"or s=="monitor_resize"then self:render(k)return false end;for _,i in pairs(self.i)do if i:handle(k,{s,unpack(t)})then return true end end;return false end;local u=g:extend("am.ui.Screen")f.Screen=u;function u:init(k,h)h=h or{}a.expect(1,k,"table","nil")a.field(h,"id","string","nil")a.field(h,"textColor","number","nil")a.field(h,"backgroundColor","number","nil")if k==nil then k=term end;f.h.requireOutput(k)if h.textColor~=nil then a.range(h.textColor,1)end;if h.backgroundColor~=nil then a.range(h.backgroundColor,1)end;u.super.init(self,h)self.output=k;self.textColor=h.textColor;self.backgroundColor=h.backgroundColor;return self end;function u:get(j)a.expect(1,j,"string")return u.super.get(self,j,self.output)end;function u:render()if not self.visible then return end;local _,v=self.output.getSize()local w=f.h.getColor(self.textColor,self.output.getTextColor())local x=f.h.getColor(self.backgroundColor,self.output.getBackgroundColor())self.output.setTextColor(w)self.output.setBackgroundColor(x)self.output.clear()self.output.setCursorPos(1,1)self.output.setCursorBlink(false)u.super.render(self,self.output)self.output.setCursorPos(1,v)self.output.setTextColor(w)self.output.setBackgroundColor(x)end;function u:handle(s,...)local s,t=b.cleanEventArgs(s,...)a.expect(1,s,"string")local k;if f.c.l.Events.Always[s]then k=self.output else k=f.h.getEventOutput({s,unpack(t)})if not f.c.l.Events.UI[s]and not f.h.isSameScreen(self.output,k)then return false end end;if f.c.l.Events.UI[s]then local i=self:get(t[1].objId)if i~=nil then if i:handle({s,unpack(t)})then return true end end;return false end;if s=="term_resize"or s=="monitor_resize"then self:render()return false end;for _,i in pairs(self.i)do if i:handle(k,{s,unpack(t)})then return true end end;return true end;function u:bind(k)return self end;local y=d.UIObject:extend("am.ui.Text")f.Text=y;function y:init(z,A,h)h=h or{}a.expect(1,z,"table")a.expect(2,A,"string","table")a.field(h,"id","string","nil")a.field(h,"textColor","number","nil")a.field(h,"backgroundColor","number","nil")if h.textColor~=nil then a.range(h.textColor,1)end;if h.backgroundColor~=nil then a.range(h.backgroundColor,1)end;y.super.init(self,h)self.label=A;self.anchor=z;self.textColor=h.textColor;self.backgroundColor=h.backgroundColor;self:validate()return self end;function y:validate(k)y.super.validate(self,k)a.field(self,"label","string","table")a.field(self,"anchor","table")a.field(self,"textColor","number","nil")a.field(self,"backgroundColor","number","nil")if not f.h.isAnchor(self.anchor)then error("anchor much be of type Anchor")end end;function y:handle(k,s,...)local s,t=b.cleanEventArgs(s,...)a.expect(1,k,"table")a.expect(2,s,"string")f.h.requireOutput(k)if f.c.l.Events.UI[s]and t[1].objId==self.id then if s==f.c.e.Events.text_update then local B=t[1].oldLabel;local C=t[1].newLabel;if#C<#B then self.label=string.rep(" ",#B)local p=self.backgroundColor;local o=self.textColor;self.backgroundColor=k.getBackgroundColor()self.textColor=k.getBackgroundColor()self:render(k)self.backgroundColor=p;self.textColor=o end;self.label=C;self:render(k)return true end end;return false end;function y:getLines()local D;if type(self.label)=="string"then D={self.label}else D=b.copy(self.label)end;local E=0;for F,G in ipairs(D)do local H,I=c.getTextColor(G)local J={text=H,color=I}if#H>E then E=#H end;D[F]=J end;return D,E end;function y:render(k)if not self.visible then return end;a.expect(1,k,"table","nil")if k==nil then k=term end;local o=k.getTextColor()local p=k.getBackgroundColor()local q,r=k.getCursorPos()y.super.render(self,k)local D,K=self:getLines()local L=self.anchor:getPos(k,K,#D)local x=f.h.getColor(self.backgroundColor,k.getBackgroundColor())for F=0,#D-1,1 do local G=D[F+1]local w=f.h.getColor(self.textColor,G.color,k.getTextColor())k.setTextColor(w)k.setBackgroundColor(x)k.setCursorPos(L.x,L.y+F)k.write(G.text)end;k.setTextColor(o)k.setBackgroundColor(p)k.setCursorPos(q,r)end;function y:update(k,A)a.expect(1,k,"table")a.expect(2,A,"string","table")f.h.requireOutput(k)if self.label~=A then local s=f.e.TextUpdateEvent(k,self.id,self.label,A)self.label=A;os.queueEvent(s.name,s)end end;function y:bind(k)return e.BoundText(k,self)end;local M=g:extend("am.ui.Frame")f.Frame=M;function M:init(z,h)h=h or{}a.expect(1,z,"table")a.field(h,"id","string","nil")a.field(h,"width","number","nil")a.field(h,"height","number","nil")a.field(h,"fillHorizontal","boolean","nil")a.field(h,"fillVertical","boolean","nil")a.field(h,"padLeft","number","nil")a.field(h,"padRight","number","nil")a.field(h,"padTop","number","nil")a.field(h,"padBottom","number","nil")a.field(h,"backgroundColor","number","nil")a.field(h,"borderColor","number","nil")a.field(h,"fillColor","number","nil")a.field(h,"textColor","number","nil")a.field(h,"border","number","nil")a.field(h,"scrollBar","boolean","nil")a.field(h,"scrollBarTrackColor","number","nil")a.field(h,"scrollBarColor","number","nil")a.field(h,"scrollBarButtonColor","number","nil")a.field(h,"scrollBarTextColor","number","nil")a.field(h,"scrollBarDisabledColor","number","nil")M.super.init(self,h)if h.fillHorizontal==nil then h.fillHorizontal=false end;if h.fillVertical==nil then h.fillVertical=false end;if h.padding==nil then h.padding=1 end;if h.borderColor==nil then h.borderColor=colors.gray end;if h.border==nil then h.border=1 end;if h.padLeft==nil then h.padLeft=0 end;if h.padRight==nil then h.padRight=h.padLeft end;if h.padTop==nil then h.padTop=math.max(0,h.padLeft-1)end;if h.padBottom==nil then h.padBottom=h.padTop end;if h.scrollBar==nil then h.scrollBar=false end;if h.scrollBarTrackColor==nil then h.scrollBarTrackColor=colors.lightGray end;if h.scrollBarColor==nil then h.scrollBarColor=colors.gray end;if h.scrollBarButtonColor==nil then h.scrollBarButtonColor=h.scrollBarColor end;if h.scrollBarTextColor==nil then h.scrollBarTextColor=h.scrollBarTrackColor end;if h.scrollBarDisabledColor==nil then h.scrollBarDisabledColor=colors.black end;self.anchor=z;self.width=h.width;self.height=h.height;self.fillHorizontal=h.fillHorizontal;self.fillVertical=h.fillVertical;self.padLeft=h.padLeft;self.padRight=h.padRight;self.padTop=h.padTop;self.padBottom=h.padBottom;self.backgroundColor=h.backgroundColor;self.borderColor=h.borderColor;self.fillColor=h.fillColor;self.textColor=h.textColor;self.border=h.border;self.scrollBar=h.scrollBar;self.scrollBarTrackColor=h.scrollBarTrackColor;self.scrollBarColor=h.scrollBarColor;self.scrollBarButtonColor=h.scrollBarButtonColor;self.scrollBarTextColor=h.scrollBarTextColor;self.scrollBarDisabledColor=h.scrollBarDisabledColor;if self.scrollBar then self.currentScroll=0 else self.currentScroll=-1 end;self.maxScroll=0;self:validate()return self end;function M:get(j,k)a.expect(1,j,"string")a.expect(2,k,"table","nil")local N=b.split(j,".")local O=N[1]for F=2,#N-1,1 do O=O.."."..N[F]end;if O==self.id then return self:bind(k)end;if k~=nil then f.h.requireOutput(k)k=self:makeScreen(k)end;return M.super.get(self,j,k)end;function M:validate(k)a.field(self,"border","number")a.range(self.border,0,3)a.field(self,"anchor","table")if not f.h.isAnchor(self.anchor)then error("anchor much be of type Anchor")end;a.field(self,"width","number","nil")if self.width~=nil then a.range(self.width,1)end;a.field(self,"height","number","nil")if self.height~=nil then if self.border>0 then a.range(self.height,3)else a.range(self.height,1)end end;if self.backgroundColor~=nil then a.field(self,"backgroundColor","number")a.range(self.backgroundColor,1)end;if self.fillColor~=nil then a.field(self,"fillColor","number")a.range(self.fillColor,1)end;if self.borderColor~=nil then a.field(self,"borderColor","number")a.range(self.borderColor,1)end;if self.textColor~=nil then a.field(self,"textColor","number")a.range(self.textColor,1)end;if self.scrollBar and self.height==nil then error(string.format("frame (%s) cannot have nil height with a scrollBar"))end end;function M:getBackgroundColor(k)a.expect(1,k,"table","nil")if k~=nil then f.h.requireOutput(k)return f.h.getColor(self.backgroundColor,k.getBackgroundColor())end;return self.backgroundColor end;function M:getFillColor(k)return self.fillColor end;function M:getBorderColor(k)a.expect(1,k,"table","nil")if k~=nil then f.h.requireOutput(k)f.h.getColor(self.borderColor,k.getBackgroundColor())end;return self.borderColor end;function M:getTextColor(k)a.expect(1,k,"table","nil")if k~=nil then f.h.requireOutput(k)return f.h.getColor(self.textColor,k.getTextColor())end;return self.textColor end;function M:getBaseWidth()local K=self.width;if K~=nil then return K end;K=1+self.padLeft+self.padRight;if self.border>0 then K=K+2 end;return K end;function M:getWidth(k,P)a.expect(2,P,"number","nil")if P==nil then P=self.anchor:getXPos(k,self:getBaseWidth())end;local K=self:getBaseWidth()if self.fillHorizontal and not(self.anchor:is(f.a.Right)or self.anchor:is(f.a.TopRight)or self.anchor:is(f.a.BottomRight))then local Q,_=k.getSize()K=Q-P+1 end;return K end;function M:getBaseHeight()local v=self.height;if v~=nil then return v end;v=1+self.padTop+self.padBottom;if self.border>0 then v=v+2 end;return v end;function M:getHeight(k,R)a.expect(2,R,"number","nil")local v=self:getBaseHeight()if self.fillVertical and not(self.anchor:is(f.a.Bottom)and self.anchor:is(f.a.BottomLeft)and self.anchor:is(f.a.BottomRight))then local _,S=k.getSize()v=S-R+1 end;return v end;function M:makeScreen(k,L,K,v,T)a.expect(1,k,"table")a.expect(2,L,"table","nil")a.expect(3,K,"number","nil")a.expect(4,v,"number","nil")a.expect(5,T,"boolean","nil")f.h.requireOutput(k)if L==nil then L=self.anchor:getPos(k,self:getBaseWidth(),self:getBaseHeight())else L=b.copy(L)end;if T==nil then T=true end;if not f.h.isPos(L)then error("pos must be a ScreenPos")end;if K==nil then K=self:getWidth(k,L.x)end;if v==nil then v=self:getHeight(k,L.y)end;local U=-1;if self.scrollBar then _,U=k.getSize()end;if self.border>0 then K=K-2;v=v-2;L.x=L.x+1;L.y=L.y+1;U=U-2 end;if self.scrollBar then K=K-1 end;local V=d.FrameScreen(k,self.id,b.copy(L),K,v,self:getTextColor(k),self:getFillColor(k),self.currentScroll,U)if T then V:addPadding(self.padLeft,self.padRight,self.padTop,self.padBottom)end;return V:ccCompat()end;function M:scroll(k,W)local X=self.currentScroll;local Y=self.currentScroll+W;if W<0 then self.currentScroll=math.max(0,Y)else self.currentScroll=math.min(self.maxScroll,Y)end;if self.currentScroll~=X then local s=f.e.FrameScrollEvent(k,self.id,X,self.currentScroll)os.queueEvent(s.name,s)end end;function M:renderScrollBar(k,K,v,Z,R)local z=f.a.Anchor(K,R)if self.border>0 then z.x=z.x-1;z.y=z.y+1;Z=Z-2 end;self.maxScroll=v-Z;local a0=Z-2;local a1=math.max(1,math.floor(Z/v*a0))local a2=1;if self.maxScroll>0 then a2=math.floor(self.currentScroll/self.maxScroll*a0)a2=math.min(a0-a1,a2)a2=math.max(0,a2)end;local a3=f.a.Anchor(1,R+a2)local a4=self;local a5=self.id..".scrollBar"local a6=self.id..".scrollUp"local a7=self.id..".scrollDown"if self.scrollFrame==nil then self.scrollFrame=f.Frame(z,{id=self.id..".scrollFrame",width=1,height=Z,border=0,fillColor=self.scrollBarTrackColor})local a8=f.Button(f.a.TopLeft(),"\x1e",{id=a6,fillColor=self.scrollBarDisabledColor,textColor=self.scrollBarTextColor,border=0,disabled=true,padLeft=0})a8:addActivateHandler(function()a4:scroll(k,-1)end)local a9=f.Button(f.a.BottomLeft(),"\x1f",{id=a7,fillColor=self.scrollBarButtonColor,textColor=self.scrollBarTextColor,border=0,padLeft=0})a9:addActivateHandler(function()a4:scroll(k,1)end)local aa=f.Frame(a3,{id=a5,width=1,height=a1,border=0,fillColor=self.scrollBarColor})self.scrollFrame:add(a8)self.scrollFrame:add(a9)self.scrollFrame:add(aa)else self.scrollFrame.anchor=z;self.scrollFrame.height=Z;self.scrollFrame.fillColor=self.scrollBarTrackColor;local ab=self.scrollFrame.i[a6]ab.disabled=self.currentScroll==0;if ab.disabled then ab.fillColor=self.scrollBarDisabledColor else ab.fillColor=self.scrollBarButtonColor end;local ac=self.scrollFrame.i[a7]ac.disabled=self.currentScroll==self.maxScroll;if ac.disabled then ac.fillColor=self.scrollBarDisabledColor else ac.fillColor=self.scrollBarButtonColor end;local aa=self.scrollFrame.i[a5]aa.height=a1;aa.fillColor=self.scrollBarColor;aa.anchor=a3 end;self.scrollFrame:render(k)end;function M:render(k)if not self.visible then return end;a.expect(1,k,"table","nil")if k==nil then k=term end;self:validate(k)local o=k.getTextColor()local p=k.getBackgroundColor()local q,r=k.getCursorPos()local L=self.anchor:getPos(k,self:getBaseWidth(),self:getBaseHeight())local K=self:getWidth(k,L.x)local v=self:getHeight(k,L.y)local x=self:getBackgroundColor(k)local ad=self:getBorderColor(k)local w=self:getTextColor(k)local Z=v;if self.scrollBar then local _,S=k.getSize()Z=math.min(Z,S-L.y+1)end;local a1=v-self.padTop-self.padBottom;if self.border>0 then a1=a1-2;if self:getBackgroundColor()~=nil or self:getBorderColor()~=nil then if self.border==1 then f.h.renderBorder1(k,L,K,Z,x,ad)elseif self.border==2 then f.h.renderBorder2(k,L,K,Z,x,ad)else f.h.renderBorder3(k,L,K,Z,ad)end end end;k.setTextColor(w)k.setBackgroundColor(f.h.getColor(self:getFillColor(k),p))local V=self:makeScreen(k,L,K,v,false)if self:getFillColor()~=nil then V.clear()end;f.h.getFrameScreen(V):addPadding(self.padLeft,self.padRight,self.padTop,self.padBottom)if self.scrollBar then a1=a1+self.padTop+self.padBottom;self:renderScrollBar(k,K,a1,Z,L.y)end;M.super.render(self,V)k.setTextColor(o)k.setBackgroundColor(p)k.setCursorPos(q,r)end;function M:within(k,ae,af)if not self.visible then return false end;a.expect(1,k,"table")f.h.requireOutput(k)a.expect(2,ae,"number")a.expect(3,af,"number")a.range(ae,1)a.range(af,1)self:validate(k)local ag=self.anchor:getPos(k,self:getBaseWidth(),self:getBaseHeight())if f.h.isFrameScreen(k)then local ah=f.h.getFrameScreen(k)ag=d.ScreenPos(ah:toAbsolutePos(ag.x,ag.y))end;local K=self:getWidth(k,ag.x)local v=self:getHeight(k,ag.y)local ai=d.ScreenPos(ag.x+K-1,ag.y+v-1)return ae>=ag.x and ae<=ai.x and af>=ag.y and af<=ai.y end;function M:handle(k,s,...)local s,t=b.cleanEventArgs(s,...)a.expect(1,k,"table")a.expect(2,s,"string")f.h.requireOutput(k)if s==f.c.e.Events.frame_scroll and t[1].objId==self.id then if self.scrollBar then self.currentScroll=t[1].newScroll;self:render(k)end;return true elseif self.scrollBar then if self.scrollFrame~=nil then if s~="mouse_scroll"then if self.scrollFrame:handle(k,{s,unpack(t)})then return true end end end end;local V=self:makeScreen(k)for _,i in pairs(self.i)do if i:handle(V,{s,unpack(t)})then return true end end;local aj={mouse_click=true,mouse_up=true,monitor_touch=true,mouse_scroll=true}if aj[s]then local L;if t[2]>0 and t[3]>0 then L=d.ScreenPos(t[2],t[3])end;local ak=nil;if s=="mouse_scroll"or L~=nil and self:within(k,L.x,L.y)then local al=false;if s=="mouse_scroll"then if self.scrollBar then if L==nil or self:within(k,L.x,L.y)then local am=t[1]if am==0 then am=-1 end;self:scroll(k,am)end end;return false else local ah=f.h.getFrameScreen(V)local ae,af=ah:toRealtivePos(L.x,L.y)local an=ah:getClickArea(ae,af,self.padLeft,self.padRight,self.padTop,self.padBottom)if s=="mouse_click"and self.visible then al=true;ak=f.e.FrameClickEvent(k,self.id,ae,af,an,t[1])elseif s=="mouse_up"then ak=f.e.FrameDeactivateEvent(k,self.id,ae,af,an,t[1])elseif s=="monitor_touch"and self.visible then al=true;ak=f.e.FrameTouchEvent(k,self.id,ae,af,an)end;if ak~=nil then os.queueEvent(ak.name,ak)end end;return al end end;return false end;function M:bind(k)return e.BoundFrame(k,self)end;local ao=M:extend("am.ui.Button")f.Button=ao;function ao:init(z,A,h)h=h or{}a.expect(1,z,"table")a.expect(2,A,"string")a.field(h,"labelAnchor","table","nil")a.field(h,"disabled","boolean","nil")a.field(h,"activateOnTouch","boolean","nil")a.field(h,"activateOnLeftClick","boolean","nil")a.field(h,"activateOnRightClick","boolean","nil")a.field(h,"activateOnMiddleClick","boolean","nil")if h.labelAnchor==nil then h.labelAnchor=f.a.Middle()end;if h.padLeft==nil then h.padLeft=1 end;if h.disabled==nil then h.disabled=false end;if h.activateOnTouch==nil then h.activateOnTouch=true end;if h.activateOnLeftClick==nil then h.activateOnLeftClick=true end;if h.activateOnRightClick==nil then h.activateOnRightClick=true end;if h.activateOnMiddleClick==nil then h.activateOnMiddleClick=true end;ao.super.init(self,z,h)self.label=y(h.labelAnchor,A,{id=string.format("%s.label",self.id)})self.disabled=h.disabled;self.activated=false;self.activateOnTouch=h.activateOnTouch;self.activateOnLeftClick=h.activateOnLeftClick;self.activateOnRightClick=h.activateOnRightClick;self.activateOnMiddleClick=h.activateOnMiddleClick;self.activateHandlers={}self.touchTimer=nil;self:add(self.label)self:validate()return self end;function ao:updateLabel(k,A)k=self:makeScreen(k)self.label:update(k,A)end;function ao:getBaseWidth()local K=ao.super.getBaseWidth(self)if self.width~=nil then return K end;return K+#self.label.label-1 end;function ao:getFillColor(k)a.expect(1,k,"table","nil")if k~=nil and self.activated then f.h.requireOutput(k)f.h.getColor(self.borderColor,k.getBackgroundColor())end;if self.activated then return self.borderColor end;return self.fillColor end;function ao:getBorderColor(k)a.expect(1,k,"table","nil")if k~=nil and not self.activated then f.h.requireOutput(k)f.h.getColor(self.borderColor,k.getBackgroundColor())end;if self.activated then return self.fillColor end;return self.borderColor end;function ao:activate(k,ap)if self.disabled or self.activated then return end;a.expect(2,ap,"boolean","nil")self.activated=true;local s=f.e.ButtonActivateEvent(k,self.id,ap)os.queueEvent(s.name,s)end;function ao:deactivate(k)if not self.activated then return end;self.activated=false;local s=f.e.ButtonDeactivateEvent(k,self.id)os.queueEvent(s.name,s)end;function ao:addActivateHandler(aq)a.expect(1,aq,"function")local j=tostring(aq)self.activateHandlers[j]=aq;return function()self.activateHandlers[j]=nil end end;function ao:onActivate(k,s)if self.disabled then return end;self.activated=true;for _,aq in pairs(self.activateHandlers)do aq(self,k,s)end;self:render(k)if s.touch then self.touchTimer=os.startTimer(0.5)end end;function ao:onDeactivate(k,s)self.activated=false;self:render(k)end;function ao:onTouch(k,s)if self.disabled or self.activated or not self.activateOnTouch then return end;self:activate(k,true)end;function ao:onClick(k,s)if self.disabled or self.activated then return end;if s.clickType==f.c.Click.Left and self.activateOnLeftClick then self:activate(k)elseif s.clickType==f.c.Click.Right and self.activateOnRightClick then self:activate(k)elseif s.clickType==f.c.Click.Middle and self.activateOnMiddleClick then self:activate(k)end end;function ao:onUp(k,s)if self.disabled or not self.activated then return end;self:deactivate(k)end;function ao:get(j,k)a.expect(1,j,"string")a.expect(2,k,"table","nil")if j==self.label.id then return self:bind(k)end;if k~=nil then f.h.requireOutput(k)k=self:makeScreen(k)end;return M.super.get(self,j,k)end;function ao:handle(k,s,...)local s,t=b.cleanEventArgs(s,...)a.expect(1,k,"table")a.expect(2,s,"string")f.h.requireOutput(k)if s=="mouse_up"then self:deactivate(k)return false end;if f.c.l.Events.UI[s]then local ar=t[1]if ar.objId==self.id then if s==f.c.e.Events.frame_touch then self:onTouch(k,ar)elseif s==f.c.e.Events.frame_click then self:onClick(k,ar)elseif s==f.c.e.Events.frame_up then self:onUp(k,ar)elseif s==f.c.e.Events.button_activate then self:onActivate(k,ar)elseif s==f.c.e.Events.button_deactivate then self:onDeactivate(k,ar)end elseif s==f.c.e.Events.text_update then if ar.objId==self.label.id then local B=ar.oldLabel;local C=ar.newLabel;if#C<#B then local p=self.backgroundColor;local as=self.borderColor;local at=self.fillColor;self.backgroundColor=k.getBackgroundColor()self.borderColor=k.getBackgroundColor()self.fillColor=k.getBackgroundColor()self.label.label=string.rep(" ",#B)self:render(k)self.backgroundColor=p;self.borderColor=as;self.fillColor=at end;self.label.label=C;self:render(k)return true end end;return ar.objId==self.id or ar.objId==self.label.id elseif s=="timer"then if t[1]==self.touchTimer then self.touchTimer=nil;self:deactivate(k)end end;return ao.super.handle(self,k,{s,unpack(t)})end;function ao:bind(k)return e.BoundButton(k,self)end;local au=M:extend("am.ui.ProgressBar")f.ProgressBar=au;function au:init(z,h)h=h or{}a.expect(1,z,"table")a.field(h,"label","string","nil")a.field(h,"labelAnchor","table","nil")a.field(h,"current","number","nil")a.field(h,"total","number","nil")a.field(h,"displayTotal","number","nil")a.field(h,"progressColor","number","nil")a.field(h,"progressTextColor","number","nil")a.field(h,"progressVertical","boolean","nil")a.field(h,"showProgress","boolean","nil")a.field(h,"showPercent","boolean","nil")if h.label==nil then h.label=""end;if h.labelAnchor==nil then h.labelAnchor=f.a.Anchor(2,1)end;if h.total==nil then h.total=100 end;if h.current==nil then h.current=0 end;if h.progressColor==nil then h.progressColor=colors.green end;if h.progressTextColor==nil then h.progressTextColor=h.textColor end;if h.showProgress==nil then h.showProgress=true end;if h.showPercent==nil then h.showPercent=true end;if h.progressVertical==nil then h.progressVertical=false end;if h.fillHorizontal==nil then h.fillHorizontal=true end;if h.fillVertical==nil then if h.progressVertical then h.fillVertical=true end end;ao.super.init(self,z,h)self.baseLabel=h.label;self.current=h.current;self.displayTotal=h.displayTotal;self.total=h.total;self.progressColor=h.progressColor;self.progressTextColor=h.progressTextColor;self.progressVertical=h.progressVertical;self.showProgress=h.showProgress;self.showPercent=h.showPercent;self.label=y(h.labelAnchor,self:getLabelText(),{id=string.format("%s.label",self.id)})self.fillFrame=M(f.a.BottomLeft(),{id=string.format("%s.fill",self.id),fillVertical=true,border=0})self.fillLabel=y(f.a.Anchor(1,1),self:getLabelText(),{id=string.format("%s.fillLabel",self.id)})self:add(self.label)self:validate()return self end;function au:validate(k)au.super.validate(self,k)if self.fillFrame==nil then return end;a.field(self,"baseLabel","string")a.field(self,"current","number")a.range(self.current,0)a.field(self,"total","number")a.range(self.total,math.floor(self.current))a.field(self,"displayTotal","number","nil")a.field(self,"progressColor","number")a.range(self.progressColor,1)a.field(self,"showPercent","boolean")a.field(self,"showProgress","boolean")self.padLeft=0;self.padRight=0;self.padTop=0;self.padBottom=0 end;function au:bind(k)return e.BoundProgressBar(k,self)end;function au:get(j,k)a.expect(1,j,"string")a.expect(2,k,"table","nil")if j==self.label.id or j==self.fillFrame.id or j==self.fillLabel.id then return self:bind(k)end;if k~=nil then f.h.requireOutput(k)k=self:makeScreen(k)end;return M.super.get(self,j,k)end;function au:getLabelText()local A=self.baseLabel;local av=math.min(self.current,self.total)local aw=av/self.total;if self.showPercent then A=A..string.format(" %d%%",aw*100)end;if self.showProgress then local ax=self.current;local ay=self.total;if self.displayTotal~=nil then ax=math.floor(aw*self.displayTotal)ay=self.displayTotal end;A=A..string.format(" [%d/%d]",ax,ay)end;return A end;function au:render(k)if not self.visible then return end;a.expect(1,k,"table","nil")if k==nil then k=term end;local az=self:makeScreen(k)local o=k.getTextColor()local p=k.getBackgroundColor()local q,r=k.getCursorPos()local A=self:getLabelText()self.label.label=A;self.label.textColor=self:getTextColor(k)au.super.render(self,k)local av=math.min(self.current,self.total)local aw=av/self.total;local aA,aB=az.getSize()local aC=self.label.anchor:getPos(az,#A,1)local aD;if self.progressVertical then aD=math.floor(aB*aw)else aD=math.floor(aA*aw)end;if aD>0 then self.fillLabel.label=A;self.fillLabel.textColor=self.progressTextColor;local aE=false;if self.progressVertical then aC.y=aC.y-(aB-aD)if aC.y>0 then aE=true end;self.fillFrame.width=aA;self.fillFrame.height=aD;self.fillFrame.fillVertical=false;self.fillFrame.fillHorizontal=true else if aC.x<=aD then aE=true end;self.fillFrame.width=aD;self.fillFrame.height=aB;self.fillFrame.fillVertical=true;self.fillFrame.fillHorizontal=false end;if aE then self.fillLabel.anchor.x=aC.x;self.fillLabel.anchor.y=aC.y;self.fillFrame:add(self.fillLabel)else self.fillFrame:reset()end;self.fillFrame.fillColor=self.progressColor;self.fillFrame:render(az)end;k.setTextColor(o)k.setBackgroundColor(p)k.setCursorPos(q,r)end;function au:updateLabel(k,A,aF,aG)a.expect(1,k,"table")a.expect(2,A,"string","nil")a.expect(3,aF,"boolean","nil")a.expect(4,aG,"boolean","nil")f.h.requireOutput(k)local aH=A~=nil and self.baseLabel~=A;local aI=aF~=nil and self.showProgress~=aF;local aJ=aG~=nil and self.showPercent~=aG;if not(aH or aI or aJ)then return end;local s=f.e.ProgressBarLabelUpdateEvent(k,self.id)if aH then s.oldLabel=self.baseLabel;s.newLabel=A;self.baseLabel=A end;if aI then s.oldShowProgress=self.showProgress;s.newShowProgress=aF;self.showProgress=aF end;if aJ then s.oldShowPercent=self.showPercent;s.newShowPercent=aG;self.showPercent=aG end;os.queueEvent(s.name,s)end;function au:update(k,av)a.expect(1,k,"table")a.expect(2,av,"number")f.h.requireOutput(k)av=math.min(self.total,math.max(0,av))if self.current==av then return end;local s=f.e.ProgressBarUpdateEvent(k,self.id,self.current,av)self.current=av;os.queueEvent(s.name,s)end;function au:handle(k,s,...)local s,t=b.cleanEventArgs(s,...)a.expect(1,k,"table")a.expect(2,s,"string")f.h.requireOutput(k)if s==f.c.e.Events.progress_label_update and t[1].objId==self.id then if t[1].newLabel~=nil then self.baseLabel=t[1].newLabel elseif t[1].newShowProgress~=nil then self.showProgress=t[1].newShowProgress elseif t[1].newShowPercent~=nil then self.showPercent=t[1].newShowPercent end;self:render(k)return true elseif s==f.c.e.Events.progress_update and t[1].objId==self.id then self.current=math.min(self.total,math.max(0,t[1].newCurrent))self:render(k)return true end;au.super.handle(self,k,{s,unpack(t)})return false end;return f
