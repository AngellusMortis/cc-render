local a={classname="lib.object",super={}}local function b(self,c)for d,e in self:iter()do if c[d]==nil and string.find(d,"__")==1 then c[d]=e end end end;local function f(self,c)local g=self.__index;if g==nil then c.__index=self;return end;c.__index=function(h,d)local i=type(g)local j;if i=="function"then j=g(h,d)elseif i=="table"then j=g[d]else error("\"__index\" must be a function or table",2)end;if j~=nil then return j end;if d=="new"or d=="extend"then error("attempt to use instance as class",2)end;return self[d]end end;function a:new()local k={__index=self,__tostring=function()return"instance of "..self.classname end}local l=setmetatable({},k)b(self,k)f(self,k)return l end;function a:init(m)local i=type(m)if i~="table"then error("\"Object:init()\" expected a table, but got "..i,3)end;for d,e in pairs(m)do self[d]=e end end;function a:extend(n,...)if type(n)~="string"then error("class must have a name",2)end;local o,p={},{}for d,e in pairs(getmetatable(self))do p[d]=e end;for q,r in ipairs({...})do for d,e in pairs(r)do o[d]=e end end;o.classname=n;o.super=self;p.__index=self;p.__tostring=function()return"class "..n end;return setmetatable(o,p)end;function a:has(s,t)local i=type(s)local u;if i=="string"then u=s else if i~="table"then return false end;u=s.classname end;local g=0;while self.super do if self.classname==u then return g end;if g==t then return false end;self=self.super;g=g+1 end;return false end;function a:is(s)return self:has(s,0)==0 end;function a:iter(d)local e;local v={}local function w()d,e=next(self,d)if d~=nil then if v[d]then return w()else v[d]=true;return d,e,self end else if self~=a then self=self.super;return w()end end end;return w end;return setmetatable(a,{__tostring=function(self)return"class "..self.classname end,__call=function(self,...)return self:new():init(...)end})
