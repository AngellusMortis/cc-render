local a=require("cc.expect")local b=require("ext.object")local c=require("am.ui.const")local d=require("am.core")local function e(f)a.expect(1,f,"table")if f._frameScreenRef~=nil and type(f._frameScreenRef)=="table"then f=f._frameScreenRef end;return f end;local function g(h,i)a.expect(1,h,"string")a.expect(2,i,"table")return b.has(i,h)~=false end;local function j(f)a.expect(1,f,"table")return f.redirect~=nil and f.current~=nil end;local function k(f)a.expect(1,f,"table")local l=getmetatable(f)if l==nil then return false end;return l.__name=="peripheral"and l.type=="monitor"end;local function m(f)a.expect(1,f,"table")f=e(f)return g("am.ui.FrameScreen",f)end;local function n(f)return j(f)or k(f)or m(f)end;local function o(f)if not n(f)then error("Not a terminal, monitor or frame")end end;local function p(q,i)a.expect(1,i,"table")if not g("am.ui.b.UIObject",i)then local r=type(i)local s;local t,u=pcall(debug.getinfo,3,"nS")if t and u.name and u.name~=""and u.what~="C"then s=u.name end;if s then error(("bad argument #%d to '%s' (expected UIObject, got %s)"):format(q,s,r),3)else error(("bad argument #%d (expected UIObject, got %s)"):format(q,r),3)end end end;local function v(i)a.expect(1,i,"table")return g("am.ui.b.UIObject",i)end;local function w(i)a.expect(1,i,"table")return g("am.ui.Screen",i)end;local function x(i)a.expect(1,i,"table")return g("am.ui.a.Anchor",i)end;local function y(i)a.expect(1,i,"table")return g("am.ui.b.ScreenPos",i)end;local function z(A,...)local A,B=d.cleanEventArgs(A,...)a.expect(1,A,"string")local f=nil;if c.l.Events.Terminal[A]then f=term elseif c.l.Events.Monitor[A]then f=peripheral.wrap(B[1])end;return f end;local function C(D,E)a.expect(1,D,"table")a.expect(2,E,"table","nil")if E==nil then return false end;local F=false;if j(D)and j(E)then F=true elseif k(D)and k(E)then F=peripheral.getName(D)==peripheral.getName(E)elseif m(D)and m(E)then D=e(D)E=e(E)F=D.id==E.id end;return F end;local function G(H,I,J)a.expect(1,H,"number","nil")a.expect(2,I,"number","nil")a.expect(3,J,"number","nil")if H~=nil then return H elseif I~=nil then return I elseif J~=nil then return J end;error("Could not determine color")end;local function K(f,L,M,N,O,P)f.setCursorPos(L.x,L.y)f.setTextColor(O)f.setBackgroundColor(P)f.write("\x9f"..string.rep("\x8f",M-2))f.setTextColor(P)f.setBackgroundColor(O)f.write("\x90")for Q=1,N-2,1 do f.setCursorPos(L.x,L.y+Q)f.setTextColor(O)f.setBackgroundColor(P)f.write("\x95")f.setCursorPos(L.x+M-1,L.y+Q)f.setTextColor(P)f.setBackgroundColor(O)f.write("\x95")end;f.setCursorPos(L.x,L.y+N-1)f.setTextColor(P)f.setBackgroundColor(O)f.write("\x82"..string.rep("\x83",M-2).."\x81")end;local function R(f,L,M,N,O,P)f.setCursorPos(L.x,L.y)f.setTextColor(O)f.setBackgroundColor(P)f.write(string.rep("\x83",M))for Q=1,N-1,1 do f.setCursorPos(L.x,L.y+Q)f.setTextColor(O)f.setBackgroundColor(P)f.write(" ")f.setCursorPos(L.x+M-1,L.y+Q)f.setTextColor(O)f.setBackgroundColor(P)f.write(" ")end;f.setCursorPos(L.x,L.y+N-1)f.setTextColor(P)f.setBackgroundColor(O)f.write(string.rep("\x8f",M))end;local function S(f,L,M,N,P)f.setBackgroundColor(P)f.setCursorPos(L.x,L.y)f.write(string.rep(" ",M))for Q=1,N-2,1 do f.setCursorPos(L.x,L.y+Q)f.write(" ")f.setCursorPos(L.x+M-1,L.y+Q)f.write(" ")end;f.setCursorPos(L.x,L.y+N-1)f.write(string.rep(" ",M))end;local T={}T.isTerm=j;T.isMonitor=k;T.getFrameScreen=e;T.isFrameScreen=m;T.isOutput=n;T.requireOutput=o;T.getEventOutput=z;T.is=g;T.isUIObject=v;T.requireUIObject=p;T.isSameScreen=C;T.isUIScreen=w;T.isAnchor=x;T.isPos=y;T.getColor=G;T.renderBorder1=K;T.renderBorder2=R;T.renderBorder3=S;return T
