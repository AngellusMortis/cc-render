local a=require("cc.expect")local b=require("am.core")local c=require("am.text")local d=require("am.ui.base")local e=require("am.ui.const")local f=require("am.ui.event")local g=require("am.ui.helpers")local h=d.UIBoundObject:extend("am.ui.BoundText")function h:update(i)self.obj:update(self.output,i)end;local j=d.UIObject:extend("am.ui.Text")j.Bound=h;function j:init(k,i,l)l=l or{}a.expect(1,k,"table")a.expect(2,i,"string","table")a.field(l,"id","string","nil")a.field(l,"textColor","number","nil")a.field(l,"backgroundColor","number","nil")if l.textColor~=nil then a.range(l.textColor,1)end;if l.backgroundColor~=nil then a.range(l.backgroundColor,1)end;j.super.init(self,l)self.label=i;self.anchor=k;self.textColor=l.textColor;self.backgroundColor=l.backgroundColor;self:validate()return self end;function j:validate(m)j.super.validate(self,m)a.field(self,"label","string","table")a.field(self,"anchor","table")a.field(self,"textColor","number","nil")a.field(self,"backgroundColor","number","nil")if not g.isAnchor(self.anchor)then error("anchor much be of type Anchor")end end;function j:handle(m,n,...)local n,o=b.cleanEventArgs(n,...)a.expect(1,m,"table")a.expect(2,n,"string")g.requireOutput(m)if e.l.Events.UI[n]and o[1].objId==self.id then if n==e.e.Events.text_update then local p,q=self:getLines(o[1].oldLabel)local r,s=self:getLines(o[1].newLabel)if s<q then self.label={}for t=1,#p,1 do self.label[t]=string.rep(" ",q)end;local u=self.backgroundColor;local v=self.textColor;self.backgroundColor=m.getBackgroundColor()self.textColor=m.getBackgroundColor()self:render(m)self.backgroundColor=u;self.textColor=v end;self.label=o[1].newLabel;self:render(m)return true end end;return false end;function j:getLines(i)local w;if i==nil then i=self.label end;if type(i)=="string"then w={i}else w=b.copy(i)end;local x=0;for t,y in ipairs(w)do local z,A=c.getTextColor(y)local B={text=z,color=A}if#z>x then x=#z end;w[t]=B end;return w,x end;function j:render(m)if not self.visible then return end;a.expect(1,m,"table","nil")if m==nil then m=term end;local v=m.getTextColor()local u=m.getBackgroundColor()local C,D=m.getCursorPos()j.super.render(self,m)local w,E=self:getLines()local F=self.anchor:getPos(m,E,#w)local G=g.getColor(self.backgroundColor,m.getBackgroundColor())for t=0,#w-1,1 do local y=w[t+1]local H=g.getColor(self.textColor,y.color,m.getTextColor())m.setTextColor(H)m.setBackgroundColor(G)m.setCursorPos(F.x,F.y+t)m.write(y.text)end;m.setTextColor(v)m.setBackgroundColor(u)m.setCursorPos(C,D)end;function j:update(m,i)a.expect(1,m,"table")a.expect(2,i,"string","table")g.requireOutput(m)local I=false;if type(i)=="string"then I=self.label~=i elseif type(i)~=type(self.label)or#i~=#self.label then I=true else for t,y in ipairs(self.label)do if y~=i[t]then I=true;break end end end;if I then local n=f.TextUpdateEvent(m,self.id,self.label,i)self.label=i;os.queueEvent(n.name,n)end end;function j:bind(m)return h(m,self)end;return j
