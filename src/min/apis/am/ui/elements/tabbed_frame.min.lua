local a=require("cc.expect")local b=require("am.core")local c=require("am.ui.elements.frame")local d=require("am.ui.elements.button")local e=require("am.ui.anchor")local f=require("am.ui.helpers")local g=require("am.ui.event")local h=require("am.ui.const")local i=c.Bound:extend("am.ui.BoundTabbedFrame")function i:createTab(j)return self.obj:createTab(j)end;function i:getIndex(k)return self.obj:getIndex(k)end;function i:setLabel(k,l)return self.obj:setLabel(self.output,k,l)end;function i:getTab(k)return self.obj:getTab(self.output,k)end;function i:getActive()return self.obj:getActive(self.output)end;function i:setActive(k)self.obj:setActive(self.output,k)end;function i:renderTabs()self.obj:renderTabs(self.output)end;local m=c:extend("am.ui.Popup")function m:init(n,o)o=o or{}a.expect(1,n,"table")a.field(o,"primaryTabId","string","nil")a.field(o,"showTabs","boolean","nil")a.field(o,"tabBackgroundColor","number","nil")a.field(o,"activeTabFillColor","number","nil")a.field(o,"activeTabTextColor","number","nil")a.field(o,"tabFillColor","number","nil")a.field(o,"tabTextColor","number","nil")m.super.init(self,n,o)if o.primaryTabId==nil then o.primaryTabId="main"end;if o.showTabs==nil then o.showTabs=false end;if o.activeTabFillColor==nil then o.activeTabFillColor=o.tabFillColor end;if o.activeTabTextColor==nil then o.activeTabTextColor=o.tabTextColor end;self.i=nil;self.tabs={}self.tabIndexIdMap={}self.tabIdMap={}self.tabLabelMap={}self.tabIndexLabelMap={}self.tabBackgroundColor=o.tabBackgroundColor;self.tabFillColor=o.tabFillColor;self.tabTextColor=o.tabTextColor;self.activeTabFillColor=o.activeTabFillColor;self.activeTabTextColor=o.activeTabTextColor;self.labelFrame=nil;if o.showTabs then self.labelFrame=c(e.TopLeft(),{id=self.id..".labelFrame",height=1,border=0,fillHorizontal=true,fillColor=o.tabBackgroundColor})end;self:createTab(o.primaryTabId)self:setActive(nil,1)return self end;function m:createTab(j,p)if self.tabIdMap[j]~=nil then error(string.format("Tab with id %s already exists",j))return end;local n=e.Anchor(1,1)if self.labelFrame~=nil then n.y=2 end;local q=#self.tabs+1;local r=string.format("%s.%s",self.id,j)local s=c(n,{id=r,width=self.width,height=self.height,fillHorizontal=self.fillHorizontal,fillVertical=self.fillVertical,padLeft=self.padLeft,padRight=self.padRight,padTop=self.padTop,padBottom=self.padBottom,backgroundColor=self.backgroundColor,borderColor=self.borderColor,fillColor=self.fillColor,textColor=self.textColor,border=self.border,scrollBar=self.scrollBar,scrollBarTrackColor=self.scrollBarTrackColor,scrollBarColor=self.scrollBarColor,scrollBarButtonColor=self.scrollBarButtonColor,scrollBarTextColor=self.scrollBarTextColor,scrollBarDisabledColor=self.scrollBarDisabledColor})if self.labelFrame~=nil then local t=d(e.Anchor(1,1),{id=r.."Label"})local u=self;t:addActivateHandler(function(v,p)p=f.getFrameScreen(f.getFrameScreen(p).output).output;u:setActive(p,j)end)self.labelFrame:add(t)end;s:setVisible(false)self.tabs[q]=s;self.tabIdMap[j]=q;self.tabIndexIdMap[q]=j;if p~=nil then local w=g.TabCreatedEvent(p,self.id,j)os.queueEvent(w.name,w)end;return s end;function m:getIndex(k)a.expect(1,k,"number","string")local q=nil;if type(k)=="number"then a.range(q,1,#self.tabs)q=k else q=self.tabIdMap[k]end;return q end;function m:removeTab(k,p)a.expect(1,k,"number","string")if#self.tabs==1 then error("Cannot remove last tab")end;local x=self:getIndex(k)local y=self.tabIndexIdMap;local z=self.tabIndexLabelMap;local r=y[x]self.tabIndexIdMap={}self.tabIdMap={}self.tabLabelMap={}self.tabIndexLabelMap={}for q,j in ipairs(y)do if q~=x then local l=z[q]if q>x then q=q-1 end;self.tabIndexIdMap[q]=j;self.tabIdMap[j]=q;self.tabLabelMap[l]=q;self.tabIndexLabelMap[j]=l end end;table.remove(self.tabs,x)if p~=nil then local w=g.TabRemovedEvent(p,self.id,r)os.queueEvent(w.name,w)end;if x>#self.tabs then if p~=nil then self:setActive(p,#self.tabs)else self.active=#self.tabs end end end;function m:setLabel(p,k,l)a.expect(1,k,"number","string")a.expect(2,l,"string")local q=self:getIndex(k)if q==nil then error("Could not find tab")end;if self.tabLabelMap[l]~=nil then error(string.format("Label %s already exists",l))end;local A=self.tabIndexLabelMap[q]if A~=nil then self.tabLabelMap[A]=nil end;self.tabLabelMap[l]=q;self.tabIndexLabelMap[q]=l;local w=g.TabLabelUpdatedEvent(p,self.id,self.tabIndexIdMap[q],A,l)os.queueEvent(w.name,w)end;function m:getTab(p,k)a.expect(1,k,"number","string")local q=self:getIndex(k)local s=nil;if q~=nil then s=self.tabs[q]end;if s==nil then error("Could not find tab")end;return s:bind(self:makeScreen(p))end;function m:getActive(p)return self:getTab(p,self.active)end;function m:setActive(p,k)a.expect(1,k,"number","string")local q=self:getIndex(k)for x,s in ipairs(self.tabs)do if x==q then s:setVisible(true)if s.scrollBar then s.currentScroll=0 end else s:setVisible(false)end end;if p~=nil then local w=g.TabChangedEvent(p,self.id,self.active,q)os.queueEvent(w.name,w)end;self.active=q end;function m:setVisible(B)a.expect(1,B,"boolean")if B then self:setActive(nil,self.active)else for C,s in ipairs(self.tabs)do s:setVisible(false)end end;self.visible=B end;function m:renderTabs(p)if not self.visible then return end;if self.labelFrame==nil then return end;local D=1;local E=f.getColor(self.tabFillColor,self.fillColor,p.getBackgroundColor())local F=f.getColor(self.tabTextColor,self.textColor,p.getTextColor())for q,j in ipairs(self.tabIndexIdMap)do local G=self.tabIndexLabelMap[q]or j;local H=string.format("%s.%sLabel",self.id,j)local l=self.labelFrame:get(H,p)l.obj.label.label=G;l.obj.anchor.x=D;if q==self.active then l.obj.fillColor=f.getColor(self.activeTabFillColor,E)l.obj.textColor=f.getColor(self.activeTabTextColor,F)else l.obj.fillColor=E;l.obj.textColor=F end;D=#G+2 end;local I=self:makeScreen(p)self.labelFrame:render(I)end;function m:render(p)if not self.visible then return end;self:renderTabs(p)local s=self:getActive(p)s:render()end;function m:get(j,p)a.expect(1,j,"string")a.expect(2,p,"table","nil")if p~=nil then f.requireOutput(p)end;if j==self.id or self.labelFrame~=nil and j==self.labelFrame.id then return self:bind(p)end;if p~=nil then p=self:makeScreen(p)end;if self.labelFrame~=nil and self.labelFrame.i[j]~=nil then return self.labelFrame:bind(p)end;for C,s in ipairs(self.tabs)do if j==s.id then return self:bind(p)end;local J=s:get(j,p)if J~=nil then return J end end;return nil end;function m:makeScreen(p,K,L,M,N)local s=self:getActive(p)return s:makeScreen(K,L,M,N)end;function m:scroll(p,O)local s=self:getActive(p)return s:scroll(O)end;function m:within(p,P,Q)local s=self:getActive(p)return s:within(P,Q)end;function m:handle(p,w,...)local w,R=b.cleanEventArgs(w,...)if w==g.c.Event.tab_created or w==g.c.Event.tab_removed or w==g.c.Event.tab_label_update then self:renderTabs(p)elseif w==h.e.Events.tab_change then self:setActive(nil,R[1].newIndex)self:render(p)return true end;if self.labelFrame:handle(p,w,table.unpack(R))then return true end;for C,s in ipairs(self.tabs)do if s:handle(p,w,table.unpack(R))then return true end end;return false end;function m:bind(p)return i(p,self)end;return m
