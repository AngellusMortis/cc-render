local a=require("cc.expect")local b=require("am.core")local c=require("am.ui.elements.frame")local d=require("am.ui.elements.button")local e=require("am.ui.anchor")local f=require("am.ui.helpers")local g=require("am.ui.event")local h=require("am.ui.const")local i=c.Bound:extend("am.ui.BoundTabbedFrame")function i:createTab(j)return self.obj:createTab(j)end;function i:getIndex(k)return self.obj:getIndex(k)end;function i:removeTab(k)return self.obj:removeTab(k)end;function i:setLabel(k,l)return self.obj:setLabel(self.output,k,l)end;function i:getTab(k)return self.obj:getTab(k,self.output)end;function i:getActive()return self.obj:getActive(self.output)end;function i:setActive(k)self.obj:setActive(self.output,k)end;function i:renderTabs()self.obj:renderTabs(self.output)end;local m=c:extend("am.ui.Popup")function m:init(n,o)o=o or{}a.expect(1,n,"table")a.field(o,"primaryTabId","string","nil")a.field(o,"showTabs","boolean","nil")a.field(o,"tabPadLeft","number","nil")a.field(o,"tabPadRight","number","nil")a.field(o,"tabPadTop","number","nil")a.field(o,"tabPadBottom","number","nil")a.field(o,"tabBackgroundColor","number","nil")a.field(o,"activeTabFillColor","number","nil")a.field(o,"activeTabTextColor","number","nil")a.field(o,"tabFillColor","number","nil")a.field(o,"tabTextColor","number","nil")m.super.init(self,n,o)if o.primaryTabId==nil then o.primaryTabId="main"end;if o.showTabs==nil then o.showTabs=false end;if o.activeTabFillColor==nil then o.activeTabFillColor=o.tabFillColor end;if o.activeTabTextColor==nil then o.activeTabTextColor=o.tabTextColor end;self.i=nil;self.tabs={}self.tabIndexIdMap={}self.tabIdMap={}self.tabLabelMap={}self.tabIndexLabelMap={}self.tabPadLeft=o.tabPadLeft;self.tabPadRight=o.tabPadRight;self.tabPadTop=o.tabPadTop;self.tabPadBottom=o.tabPadBottom;self.tabBackgroundColor=o.tabBackgroundColor;self.tabFillColor=o.tabFillColor;self.tabTextColor=o.tabTextColor;self.activeTabFillColor=o.activeTabFillColor;self.activeTabTextColor=o.activeTabTextColor;self.labelFrame=nil;if o.showTabs then self.labelFrame=c(e.TopLeft(),{id=self.id..".labelFrame",fillHorizontal=true,fillColor=o.tabBackgroundColor})end;self:createTab(o.primaryTabId)self:setActive(nil,1)return self end;function m:createTab(j,p)if self.tabIdMap[j]~=nil then error(string.format("Tab with id %s already exists",j))return end;local n=e.Anchor(1,1)local q=self.height;local r=self.width;if self.labelFrame~=nil then n.y=2;if q~=nil then q=q-1 end end;if self.width~=nil then r=r-self.padLeft-self.padRight;if self.border>0 then r=r-1 end end;local s=#self.tabs+1;local t=string.format("%s.%s",self.id,j)local u=c(n,{id=t,width=r,height=q,fillHorizontal=self.fillHorizontal,fillVertical=self.fillVertical,padLeft=self.tabPadLeft,padRight=self.tabPadRight,padTop=self.tabPadTop,padBottom=self.tabPadBottom,backgroundColor=self.backgroundColor,borderColor=self.borderColor,fillColor=self.fillColor,textColor=self.textColor,border=0,scrollBar=self.scrollBar,scrollBarTrackColor=self.scrollBarTrackColor,scrollBarColor=self.scrollBarColor,scrollBarButtonColor=self.scrollBarButtonColor,scrollBarTextColor=self.scrollBarTextColor,scrollBarDisabledColor=self.scrollBarDisabledColor})if self.labelFrame~=nil then local v=d(e.Anchor(1,1),"",{id=t.."Label",border=0})local w=self;v:addActivateHandler(function(x,p)p=f.getFrameScreen(f.getFrameScreen(p).output).output;w:setActive(p,j)end)self.labelFrame:add(v)end;u:setVisible(false)self.tabs[s]=u;self.tabIdMap[j]=s;self.tabIndexIdMap[s]=j;if p~=nil then local y=g.TabCreatedEvent(p,self.id,j)os.queueEvent(y.name,y)end;return u end;function m:getIndex(k)a.expect(1,k,"number","string")local s=nil;if type(k)=="number"then a.range(k,1,#self.tabs)s=k else s=self.tabIdMap[k]end;return s end;function m:removeTab(k,p)a.expect(1,k,"number","string")if#self.tabs==1 then error("Cannot remove last tab")end;local z=self:getIndex(k)if z==nil then error(string.format("Could not find tab: %s",k))end;local A=self.tabIndexIdMap;local B=self.tabIndexLabelMap;local t=A[z]self.tabIndexIdMap={}self.tabIdMap={}self.tabLabelMap={}self.tabIndexLabelMap={}for s,j in ipairs(A)do if s~=z then local l=B[s]if s>z then s=s-1 end;self.tabIndexIdMap[s]=j;self.tabIdMap[j]=s;self.tabLabelMap[l]=s;self.tabIndexLabelMap[j]=l end end;table.remove(self.tabs,z)if p~=nil then local y=g.TabRemovedEvent(p,self.id,t)os.queueEvent(y.name,y)end;if z>#self.tabs then if p~=nil then self:setActive(p,#self.tabs)else self.active=#self.tabs end end end;function m:setLabel(p,k,l)a.expect(1,k,"number","string")a.expect(2,l,"string")local s=self:getIndex(k)if s==nil then error(string.format("Could not find tab: %s",k))end;if self.tabLabelMap[l]~=nil then error(string.format("Label %s already exists",l))end;local C=self.tabIndexLabelMap[s]if C~=nil then self.tabLabelMap[C]=nil end;self.tabLabelMap[l]=s;self.tabIndexLabelMap[s]=l;local y=g.TabLabelUpdatedEvent(p,self.id,self.tabIndexIdMap[s],C,l)os.queueEvent(y.name,y)end;function m:getTab(k,p)a.expect(1,k,"number","string")local s=self:getIndex(k)if s==nil then error(string.format("Could not find tab: %s",k))end;local u=nil;if s~=nil then u=self.tabs[s]end;if u==nil then error("Could not find tab")end;if p~=nil then return u:bind(self:makeScreen(p))end;return u end;function m:getActive(p)return self:getTab(self.active,p)end;function m:setActive(p,k)a.expect(2,k,"number","string")local s=self:getIndex(k)if s==nil then require("am.log").debug(debug.traceback())error(string.format("Could not find tab: %s",k))end;for z,u in ipairs(self.tabs)do if z==s then u:setVisible(true)if u.scrollBar then u.currentScroll=0 end else u:setVisible(false)end end;if p~=nil then local y=g.TabChangedEvent(p,self.id,self.tabIndexIdMap[self.active],self.tabIndexIdMap[s])os.queueEvent(y.name,y)end;self.active=s end;function m:setVisible(D)a.expect(1,D,"boolean")if D then self:setActive(nil,self.active)else for E,u in ipairs(self.tabs)do u:setVisible(false)end end;self.visible=D end;function m:renderTabs(p)if not self.visible then return end;if self.labelFrame==nil then return end;self.labelFrame.border=0;self.labelFrame.height=1;self.labelFrame.fillColor=self.fillColor;self.labelFrame.backgroundColor=nil;local F=1;local G=f.getColor(self.tabFillColor,self.fillColor,p.getBackgroundColor())local H=f.getColor(self.tabTextColor,self.textColor,p.getTextColor())for s,j in ipairs(self.tabIndexIdMap)do local I=self.tabIndexLabelMap[s]or j;local J=string.format("%s.%sLabel",self.id,j)local l=self.labelFrame:get(J,p)l.obj.label.label=I;l.obj.anchor.x=F;if s==self.active then l.obj.fillColor=f.getColor(self.activeTabFillColor,G)l.obj.textColor=f.getColor(self.activeTabTextColor,H)l.obj.borderColor=f.getColor(self.activeTabFillColor,G)else l.obj.fillColor=G;l.obj.textColor=H;l.obj.borderColor=G end;F=F+#I+2 end;local K=self:makeScreen(p)self.labelFrame:render(K)end;function m:render(p)if not self.visible then return end;p.clear()m.super.render(self,p)self:renderTabs(p)local u=self:getActive(p)u:render()end;function m:get(j,p)a.expect(1,j,"string")a.expect(2,p,"table","nil")if p~=nil then f.requireOutput(p)end;if j==self.id or self.labelFrame~=nil and j==self.labelFrame.id then return self:bind(p)end;if p~=nil then p=self:makeScreen(p)end;if self.labelFrame~=nil and self.labelFrame.i[j]~=nil then return self.labelFrame:bind(p)end;for E,u in ipairs(self.tabs)do if j==u.id then return self:bind(p)end;local L=u:get(j,p)if L~=nil then return L end end;return nil end;function m:handle(p,y,...)local y,M=b.cleanEventArgs(y,...)if h.l.Events.UI[y]and M[1].objId==self.id then if y==h.e.Events.tab_created or y==h.e.Events.tab_removed or y==h.e.Events.tab_label_update then self:renderTabs(p)elseif y==h.e.Events.tab_change then self:setActive(nil,M[1].newTabId)self:render(p)return true end end;local N=nil;if p~=nil then N=self:makeScreen(p)end;if self.labelFrame~=nil and self.labelFrame:handle(N,y,table.unpack(M))then return true end;for E,u in ipairs(self.tabs)do if u:handle(N,y,table.unpack(M))then return true end end;m.super.handle(self,p,y,table.unpack(M))return false end;function m:bind(p)return i(p,self)end;return m
