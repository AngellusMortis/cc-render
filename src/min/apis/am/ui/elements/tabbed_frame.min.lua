local a=require("cc.expect")local b=require("am.core")local c=require("am.ui.elements.frame")local d=require("am.ui.elements.button")local e=require("am.ui.anchor")local f=require("am.ui.helpers")local g=require("am.ui.event")local h=require("am.ui.const")local i=c.Bound:extend("am.ui.BoundTabbedFrame")function i:createTab(j)return self.obj:createTab(j)end;function i:getIndex(k)return self.obj:getIndex(k)end;function i:removeTab(k)return self.obj:removeTab(k)end;function i:setLabel(k,l)return self.obj:setLabel(self.output,k,l)end;function i:getTab(k)return self.obj:getTab(k,self.output)end;function i:getActive()return self.obj:getActive(self.output)end;function i:setActive(k)self.obj:setActive(self.output,k)end;function i:renderTabs()self.obj:renderTabs(self.output)end;local m=c:extend("am.ui.Popup")function m:init(n,o)o=o or{}a.expect(1,n,"table")a.field(o,"primaryTabId","string","nil")a.field(o,"showTabs","boolean","nil")a.field(o,"tabBackgroundColor","number","nil")a.field(o,"activeTabFillColor","number","nil")a.field(o,"activeTabTextColor","number","nil")a.field(o,"tabFillColor","number","nil")a.field(o,"tabTextColor","number","nil")m.super.init(self,n,o)if o.primaryTabId==nil then o.primaryTabId="main"end;if o.showTabs==nil then o.showTabs=false end;if o.activeTabFillColor==nil then o.activeTabFillColor=o.tabFillColor end;if o.activeTabTextColor==nil then o.activeTabTextColor=o.tabTextColor end;self.i=nil;self.tabs={}self.tabIndexIdMap={}self.tabIdMap={}self.tabLabelMap={}self.tabIndexLabelMap={}self.tabBackgroundColor=o.tabBackgroundColor;self.tabFillColor=o.tabFillColor;self.tabTextColor=o.tabTextColor;self.activeTabFillColor=o.activeTabFillColor;self.activeTabTextColor=o.activeTabTextColor;self.labelFrame=nil;if o.showTabs then self.labelFrame=c(e.TopLeft(),{id=self.id..".labelFrame",height=1,border=0,fillHorizontal=true,fillColor=o.tabBackgroundColor})end;self:createTab(o.primaryTabId)self:setActive(nil,1)return self end;function m:createTab(j,p)if self.tabIdMap[j]~=nil then error(string.format("Tab with id %s already exists",j))return end;local n=e.Anchor(1,1)local q=self.height;if self.labelFrame~=nil then n.y=2;if q~=nil then q=q-1 end end;local r=#self.tabs+1;local s=string.format("%s.%s",self.id,j)local t=c(n,{id=s,width=self.width,height=q,fillHorizontal=self.fillHorizontal,fillVertical=self.fillVertical,padLeft=self.padLeft,padRight=self.padRight,padTop=self.padTop,padBottom=self.padBottom,backgroundColor=self.backgroundColor,borderColor=self.borderColor,fillColor=self.fillColor,textColor=self.textColor,border=self.border,scrollBar=self.scrollBar,scrollBarTrackColor=self.scrollBarTrackColor,scrollBarColor=self.scrollBarColor,scrollBarButtonColor=self.scrollBarButtonColor,scrollBarTextColor=self.scrollBarTextColor,scrollBarDisabledColor=self.scrollBarDisabledColor})if self.labelFrame~=nil then local u=d(e.Anchor(1,1),{id=s.."Label"})local v=self;u:addActivateHandler(function(w,p)p=f.getFrameScreen(f.getFrameScreen(p).output).output;v:setActive(p,j)end)self.labelFrame:add(u)end;t:setVisible(false)self.tabs[r]=t;self.tabIdMap[j]=r;self.tabIndexIdMap[r]=j;if p~=nil then local x=g.TabCreatedEvent(p,self.id,j)os.queueEvent(x.name,x)end;return t end;function m:getIndex(k)a.expect(1,k,"number","string")local r=nil;if type(k)=="number"then a.range(k,1,#self.tabs)r=k else r=self.tabIdMap[k]end;return r end;function m:removeTab(k,p)a.expect(1,k,"number","string")if#self.tabs==1 then error("Cannot remove last tab")end;local y=self:getIndex(k)local z=self.tabIndexIdMap;local A=self.tabIndexLabelMap;local s=z[y]self.tabIndexIdMap={}self.tabIdMap={}self.tabLabelMap={}self.tabIndexLabelMap={}for r,j in ipairs(z)do if r~=y then local l=A[r]if r>y then r=r-1 end;self.tabIndexIdMap[r]=j;self.tabIdMap[j]=r;self.tabLabelMap[l]=r;self.tabIndexLabelMap[j]=l end end;table.remove(self.tabs,y)if p~=nil then local x=g.TabRemovedEvent(p,self.id,s)os.queueEvent(x.name,x)end;if y>#self.tabs then if p~=nil then self:setActive(p,#self.tabs)else self.active=#self.tabs end end end;function m:setLabel(p,k,l)a.expect(1,k,"number","string")a.expect(2,l,"string")local r=self:getIndex(k)if r==nil then error("Could not find tab")end;if self.tabLabelMap[l]~=nil then error(string.format("Label %s already exists",l))end;local B=self.tabIndexLabelMap[r]if B~=nil then self.tabLabelMap[B]=nil end;self.tabLabelMap[l]=r;self.tabIndexLabelMap[r]=l;local x=g.TabLabelUpdatedEvent(p,self.id,self.tabIndexIdMap[r],B,l)os.queueEvent(x.name,x)end;function m:getTab(k,p)a.expect(1,k,"number","string")local r=self:getIndex(k)local t=nil;if r~=nil then t=self.tabs[r]end;if t==nil then error("Could not find tab")end;if p~=nil then return t:bind(self:makeScreen(p))end;return t end;function m:getActive(p)return self:getTab(self.active,p)end;function m:setActive(p,k)a.expect(2,k,"number","string")local r=self:getIndex(k)for y,t in ipairs(self.tabs)do if y==r then t:setVisible(true)if t.scrollBar then t.currentScroll=0 end else t:setVisible(false)end end;if p~=nil then local x=g.TabChangedEvent(p,self.id,self.tabIndexIdMap[self.active],self.tabIndexIdMap[r])os.queueEvent(x.name,x)end;self.active=r end;function m:setVisible(C)a.expect(1,C,"boolean")if C then self:setActive(nil,self.active)else for D,t in ipairs(self.tabs)do t:setVisible(false)end end;self.visible=C end;function m:renderTabs(p)if not self.visible then return end;if self.labelFrame==nil then return end;local E=1;local F=f.getColor(self.tabFillColor,self.fillColor,p.getBackgroundColor())local G=f.getColor(self.tabTextColor,self.textColor,p.getTextColor())for r,j in ipairs(self.tabIndexIdMap)do local H=self.tabIndexLabelMap[r]or j;local I=string.format("%s.%sLabel",self.id,j)local l=self.labelFrame:get(I,p)l.obj.label.label=H;l.obj.anchor.x=E;if r==self.active then l.obj.fillColor=f.getColor(self.activeTabFillColor,F)l.obj.textColor=f.getColor(self.activeTabTextColor,G)else l.obj.fillColor=F;l.obj.textColor=G end;E=#H+2 end;local J=self:makeScreen(p)self.labelFrame:render(J)end;function m:render(p)if not self.visible then return end;self:renderTabs(p)local t=self:getActive(p)t:render()end;function m:get(j,p)a.expect(1,j,"string")a.expect(2,p,"table","nil")if p~=nil then f.requireOutput(p)end;if j==self.id or self.labelFrame~=nil and j==self.labelFrame.id then return self:bind(p)end;if p~=nil then p=self:makeScreen(p)end;if self.labelFrame~=nil and self.labelFrame.i[j]~=nil then return self.labelFrame:bind(p)end;for D,t in ipairs(self.tabs)do if j==t.id then return self:bind(p)end;local K=t:get(j,p)if K~=nil then return K end end;return nil end;function m:handle(p,x,...)local x,L=b.cleanEventArgs(x,...)if x==h.e.Events.tab_created or x==h.e.Events.tab_removed or x==h.e.Events.tab_label_update then self:renderTabs(p)elseif x==h.e.Events.tab_change then self:setActive(nil,L[1].newTabId)self:render(p)return true end;if self.labelFrame~=nil and self.labelFrame:handle(p,x,table.unpack(L))then return true end;if p~=nil then p=self:makeScreen(p)end;for D,t in ipairs(self.tabs)do if t:handle(p,x,table.unpack(L))then return true end end;return false end;function m:bind(p)return i(p,self)end;return m
