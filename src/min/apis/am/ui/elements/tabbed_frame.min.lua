local a=require("cc.expect")local b=require("am.core")local c=require("am.ui.elements.frame")local d=require("am.ui.helpers")local e=require("am.ui.event")local f=require("am.ui.const")local g=c.Bound:extend("am.ui.BoundTabbedFrame")function g:createTab(h)return self.obj:createTab(h)end;function g:getTab(i)return self.obj:getTab(self.output,i)end;function g:getActive()return self.obj:getActive(self.output)end;function g:setActive(i)self.obj:setActive(self.output,i)end;local j=c:extend("am.ui.Popup")function j:init(k,l)l=l or{}a.expect(1,k,"table")a.field(l,"primaryTabId","string","nil")j.super.init(self,k,l)if l.primaryTabId==nil then l.primaryTabId="main"end;self.i=nil;self.tabs={}self:createTab(l.primaryTabId)self:setActive(nil,1)return self end;function j:createTab(h)local i=#self.tabs+1;local m=c(self.anchor,{id=string.format("%s.%d.%s",self.id,i,h),width=self.width,height=self.height,fillHorizontal=self.fillHorizontal,fillVertical=self.fillVertical,padLeft=self.padLeft,padRight=self.padRight,padTop=self.padTop,padBottom=self.padBottom,backgroundColor=self.backgroundColor,borderColor=self.borderColor,fillColor=self.fillColor,textColor=self.textColor,border=self.border,scrollBar=self.scrollBar,scrollBarTrackColor=self.scrollBarTrackColor,scrollBarColor=self.scrollBarColor,scrollBarButtonColor=self.scrollBarButtonColor,scrollBarTextColor=self.scrollBarTextColor,scrollBarDisabledColor=self.scrollBarDisabledColor})m:setVisible(false)self.tabs[i]=m;return m end;function j:getTab(n,i)a.expect(1,i,"number")a.range(i,1,#self.tabs)local m=self.tabs[i]return m:bind(n)end;function j:getActive(n)return self:getTab(n,self.active)end;function j:setActive(n,i)a.expect(1,i,"number")a.range(i,1,#self.tabs)for o,m in ipairs(self.tabs)do if o==i then m:setVisible(true)if m.scrollBar then m.currentScroll=0 end else m:setVisible(false)end end;if n~=nil then local p=e.TabChangedEvent(n,self.id,self.active,i)os.queueEvent(p.name,p)end;self.active=i end;function j:setVisible(q)a.expect(1,q,"boolean")if q then self:setActive(nil,self.active)else for r,m in ipairs(self.tabs)do m:setVisible(false)end end;self.visible=q end;function j:render(n)if not self.visible then return end;local m=self:getActive(n)m:render()end;function j:get(h,n)a.expect(1,h,"string")a.expect(2,n,"table","nil")if n~=nil then d.requireOutput(n)end;if h==self.id then return self:bind(n)end;for r,m in ipairs(self.tabs)do if h==m.id then return self:bind(n)end;local s=m:get(h,n)if s~=nil then return s end end;return nil end;function j:makeScreen(n,t,u,v,w)local m=self:getActive(n)return m:makeScreen(t,u,v,w)end;function j:scroll(n,x)local m=self:getActive(n)return m:scroll(x)end;function j:within(n,y,z)local m=self:getActive(n)return m:within(y,z)end;function j:handle(n,p,...)local p,A=b.cleanEventArgs(p,...)if p==f.e.Events.tab_change then self:setActive(nil,A[1].newIndex)self:render(n)return true end;for r,m in ipairs(self.tabs)do if m:handle(n,p,table.unpack(A))then return true end end;return false end;function j:bind(n)return g(n,self)end;return j
