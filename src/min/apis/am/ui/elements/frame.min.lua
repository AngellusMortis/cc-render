local a=require("cc.expect")local b=require("am.core")local c=require("am.ui.base")local d=require("am.ui.anchor")local e=require("am.ui.const")local f=require("am.ui.event")local g=require("am.ui.helpers")local h=require("am.ui.elements.group")local i=h.Bound:extend("am.ui.BoundFrame")function i:getBackgroundColor()return self.obj:getBackgroundColor(self.output)end;function i:getFillColor()return self.obj:getFillColor(self.output)end;function i:getBorderColor()return self.obj:getBorderColor(self.output)end;function i:getTextColor()return self.obj:getTextColor(self.output)end;function i:getBaseWidth()return self.obj:getBaseWidth()end;function i:getWidth(j)return self.obj:getWidth(self.output,j)end;function i:getBaseHeight()return self.obj:getBaseHeight()end;function i:getHeight(k)return self.obj:getHeight(self.output,k)end;function i:makeScreen(l,m,n,o)return self.obj:makeScreen(self.output,l,m,n,o)end;function i:within(p,q)return self.obj:within(self.output,p,q)end;function i:scroll(r)self.obj:scroll(self.output,r)end;local s=h:extend("am.ui.Frame")s.Bound=i;function s:init(t,u)u=u or{}a.expect(1,t,"table")a.field(u,"id","string","nil")a.field(u,"width","number","nil")a.field(u,"height","number","nil")a.field(u,"fillHorizontal","boolean","nil")a.field(u,"fillVertical","boolean","nil")a.field(u,"padLeft","number","nil")a.field(u,"padRight","number","nil")a.field(u,"padTop","number","nil")a.field(u,"padBottom","number","nil")a.field(u,"backgroundColor","number","nil")a.field(u,"borderColor","number","nil")a.field(u,"fillColor","number","nil")a.field(u,"textColor","number","nil")a.field(u,"border","number","nil")a.field(u,"scrollBar","boolean","nil")a.field(u,"scrollBarTrackColor","number","nil")a.field(u,"scrollBarColor","number","nil")a.field(u,"scrollBarButtonColor","number","nil")a.field(u,"scrollBarTextColor","number","nil")a.field(u,"scrollBarDisabledColor","number","nil")s.super.init(self,u)if u.fillHorizontal==nil then u.fillHorizontal=false end;if u.fillVertical==nil then u.fillVertical=false end;if u.padding==nil then u.padding=1 end;if u.borderColor==nil then u.borderColor=colors.gray end;if u.border==nil then u.border=1 end;if u.padLeft==nil then u.padLeft=0 end;if u.padRight==nil then u.padRight=u.padLeft end;if u.padTop==nil then u.padTop=math.max(0,u.padLeft-1)end;if u.padBottom==nil then u.padBottom=u.padTop end;if u.scrollBar==nil then u.scrollBar=false end;if u.scrollBarTrackColor==nil then u.scrollBarTrackColor=colors.lightGray end;if u.scrollBarColor==nil then u.scrollBarColor=colors.gray end;if u.scrollBarButtonColor==nil then u.scrollBarButtonColor=u.scrollBarColor end;if u.scrollBarTextColor==nil then u.scrollBarTextColor=u.scrollBarTrackColor end;if u.scrollBarDisabledColor==nil then u.scrollBarDisabledColor=colors.black end;self.anchor=t;self.width=u.width;self.height=u.height;self.fillHorizontal=u.fillHorizontal;self.fillVertical=u.fillVertical;self.padLeft=u.padLeft;self.padRight=u.padRight;self.padTop=u.padTop;self.padBottom=u.padBottom;self.backgroundColor=u.backgroundColor;self.borderColor=u.borderColor;self.fillColor=u.fillColor;self.textColor=u.textColor;self.border=u.border;self.scrollBar=u.scrollBar;self.scrollBarTrackColor=u.scrollBarTrackColor;self.scrollBarColor=u.scrollBarColor;self.scrollBarButtonColor=u.scrollBarButtonColor;self.scrollBarTextColor=u.scrollBarTextColor;self.scrollBarDisabledColor=u.scrollBarDisabledColor;if self.scrollBar then self.currentScroll=0 else self.currentScroll=-1 end;self.maxScroll=0;self:validate()return self end;function s:get(v,w)a.expect(1,v,"string")a.expect(2,w,"table","nil")local x=b.split(v,".")local y=x[1]for z=2,#x-1,1 do y=y.."."..x[z]end;if y==self.id then return self:bind(w)end;if w~=nil then g.requireOutput(w)w=self:makeScreen(w)end;return s.super.get(self,v,w)end;function s:validate(w)a.field(self,"border","number")a.range(self.border,0,3)a.field(self,"anchor","table")if not g.isAnchor(self.anchor)then error("anchor much be of type Anchor")end;a.field(self,"width","number","nil")if self.width~=nil then a.range(self.width,1)end;a.field(self,"height","number","nil")if self.height~=nil then if self.border>0 then a.range(self.height,3)else a.range(self.height,1)end end;if self.backgroundColor~=nil then a.field(self,"backgroundColor","number")a.range(self.backgroundColor,1)end;if self.fillColor~=nil then a.field(self,"fillColor","number")a.range(self.fillColor,1)end;if self.borderColor~=nil then a.field(self,"borderColor","number")a.range(self.borderColor,1)end;if self.textColor~=nil then a.field(self,"textColor","number")a.range(self.textColor,1)end;if self.scrollBar and self.height==nil then error(string.format("frame (%s) cannot have nil height with a scrollBar"))end end;function s:getBackgroundColor(w)a.expect(1,w,"table","nil")if w~=nil then g.requireOutput(w)return g.getColor(self.backgroundColor,w.getBackgroundColor())end;return self.backgroundColor end;function s:getFillColor(w)return self.fillColor end;function s:getBorderColor(w)a.expect(1,w,"table","nil")if w~=nil then g.requireOutput(w)g.getColor(self.borderColor,w.getBackgroundColor())end;return self.borderColor end;function s:getTextColor(w)a.expect(1,w,"table","nil")if w~=nil then g.requireOutput(w)return g.getColor(self.textColor,w.getTextColor())end;return self.textColor end;function s:getBaseWidth()local m=self.width;if m~=nil then return m end;m=1+self.padLeft+self.padRight;if self.border>0 then m=m+2 end;return m end;function s:getWidth(w,j)a.expect(2,j,"number","nil")if j==nil then j=self.anchor:getXPos(w,self:getBaseWidth())end;local m=self:getBaseWidth()if self.fillHorizontal and not(self.anchor:is(d.Right)or self.anchor:is(d.TopRight)or self.anchor:is(d.BottomRight))then local A,_=w.getSize()m=A-j+1 end;return m end;function s:getBaseHeight()local n=self.height;if n~=nil then return n end;n=1+self.padTop+self.padBottom;if self.border>0 then n=n+2 end;return n end;function s:getHeight(w,k)a.expect(2,k,"number","nil")local n=self:getBaseHeight()if self.fillVertical and not(self.anchor:is(d.Bottom)and self.anchor:is(d.BottomLeft)and self.anchor:is(d.BottomRight))then local _,B=w.getSize()n=B-k+1 end;return n end;function s:makeScreen(w,l,m,n,o)a.expect(1,w,"table")a.expect(2,l,"table","nil")a.expect(3,m,"number","nil")a.expect(4,n,"number","nil")a.expect(5,o,"boolean","nil")g.requireOutput(w)if l==nil then l=self.anchor:getPos(w,self:getBaseWidth(),self:getBaseHeight())else l=b.copy(l)end;if o==nil then o=true end;if not g.isPos(l)then error("pos must be a ScreenPos")end;if m==nil then m=self:getWidth(w,l.x)end;if n==nil then n=self:getHeight(w,l.y)end;local C=-1;if self.scrollBar then _,C=w.getSize()end;if self.border>0 then m=m-2;n=n-2;l.x=l.x+1;l.y=l.y+1;C=C-2 end;if self.scrollBar then m=m-1 end;local D=c.FrameScreen(w,self.id,b.copy(l),m,n,self:getTextColor(w),self:getFillColor(w),self.currentScroll,C)if o then D:addPadding(self.padLeft,self.padRight,self.padTop,self.padBottom)end;return D:ccCompat()end;function s:scroll(w,r)local E=self.currentScroll;local F=self.currentScroll+r;if r<0 then self.currentScroll=math.max(0,F)else self.currentScroll=math.min(self.maxScroll,F)end;if self.currentScroll~=E then local G=f.FrameScrollEvent(w,self.id,E,self.currentScroll)os.queueEvent(G.name,G)end end;function s:renderScrollBar(w,m,n,H,k)local t=d.Anchor(m,k)if self.border>0 then t.x=t.x-1;t.y=t.y+1;H=H-2 end;self.maxScroll=n-H;local I=H-2;local J=math.max(1,math.floor(H/n*I))local K=1;if self.maxScroll>0 then K=math.floor(self.currentScroll/self.maxScroll*I)K=math.min(I-J,K)K=math.max(0,K)end;local L=d.Anchor(1,k+K)local M=self;local N=self.id..".scrollBar"local O=self.id..".scrollUp"local P=self.id..".scrollDown"if self.scrollFrame==nil then local Q=require("am.ui.elements.button")self.scrollFrame=s(t,{id=self.id..".scrollFrame",width=1,height=H,border=0,fillColor=self.scrollBarTrackColor})local R=Q(d.TopLeft(),"\x1e",{id=O,fillColor=self.scrollBarDisabledColor,textColor=self.scrollBarTextColor,border=0,disabled=true,padLeft=0})R:addActivateHandler(function()M:scroll(w,-1)end)local S=Q(d.BottomLeft(),"\x1f",{id=P,fillColor=self.scrollBarButtonColor,textColor=self.scrollBarTextColor,border=0,padLeft=0})S:addActivateHandler(function()M:scroll(w,1)end)local T=s(L,{id=N,width=1,height=J,border=0,fillColor=self.scrollBarColor})self.scrollFrame:add(R)self.scrollFrame:add(S)self.scrollFrame:add(T)else self.scrollFrame.anchor=t;self.scrollFrame.height=H;self.scrollFrame.fillColor=self.scrollBarTrackColor;local U=self.scrollFrame.i[O]U.disabled=self.currentScroll==0;if U.disabled then U.fillColor=self.scrollBarDisabledColor else U.fillColor=self.scrollBarButtonColor end;local V=self.scrollFrame.i[P]V.disabled=self.currentScroll==self.maxScroll;if V.disabled then V.fillColor=self.scrollBarDisabledColor else V.fillColor=self.scrollBarButtonColor end;local T=self.scrollFrame.i[N]T.height=J;T.fillColor=self.scrollBarColor;T.anchor=L end;self.scrollFrame:render(w)end;function s:render(w)if not self.visible then return end;a.expect(1,w,"table","nil")if w==nil then w=term end;self:validate(w)local W=w.getTextColor()local X=w.getBackgroundColor()local Y,Z=w.getCursorPos()local l=self.anchor:getPos(w,self:getBaseWidth(),self:getBaseHeight())local m=self:getWidth(w,l.x)local n=self:getHeight(w,l.y)local a0=self:getBackgroundColor(w)local a1=self:getBorderColor(w)local a2=self:getTextColor(w)local H=n;if self.scrollBar then local _,B=w.getSize()H=math.min(H,B-l.y+1)end;local J=n-self.padTop-self.padBottom;if self.border>0 then J=J-2;if self:getBackgroundColor()~=nil or self:getBorderColor()~=nil then if self.border==1 then g.renderBorder1(w,l,m,H,a0,a1)elseif self.border==2 then g.renderBorder2(w,l,m,H,a0,a1)else g.renderBorder3(w,l,m,H,a1)end end end;w.setTextColor(a2)w.setBackgroundColor(g.getColor(self:getFillColor(w),X))local D=self:makeScreen(w,l,m,n,false)if self:getFillColor()~=nil then D.clear()end;g.getFrameScreen(D):addPadding(self.padLeft,self.padRight,self.padTop,self.padBottom)if self.scrollBar then J=J+self.padTop+self.padBottom;self:renderScrollBar(w,m,J,H,l.y)end;s.super.render(self,D)w.setTextColor(W)w.setBackgroundColor(X)w.setCursorPos(Y,Z)end;function s:within(w,p,q)if not self.visible then return false end;a.expect(1,w,"table")g.requireOutput(w)a.expect(2,p,"number")a.expect(3,q,"number")a.range(p,1)a.range(q,1)self:validate(w)local a3=self.anchor:getPos(w,self:getBaseWidth(),self:getBaseHeight())if g.isFrameScreen(w)then local a4=g.getFrameScreen(w)a3=c.ScreenPos(a4:toAbsolutePos(a3.x,a3.y))end;local m=self:getWidth(w,a3.x)local n=self:getHeight(w,a3.y)local a5=c.ScreenPos(a3.x+m-1,a3.y+n-1)return p>=a3.x and p<=a5.x and q>=a3.y and q<=a5.y end;function s:handle(w,G,...)local G,a6=b.cleanEventArgs(G,...)a.expect(1,w,"table")a.expect(2,G,"string")g.requireOutput(w)if G==e.e.Events.frame_scroll and a6[1].objId==self.id then if self.scrollBar then self.currentScroll=a6[1].newScroll;self:render(w)end;return true elseif self.scrollBar then if self.scrollFrame~=nil then if G~="mouse_scroll"then if self.scrollFrame:handle(w,{G,table.unpack(a6)})then return true end end end end;local D=self:makeScreen(w)if self.i~=nil then for _,a7 in pairs(self.i)do if a7:handle(D,{G,table.unpack(a6)})then return true end end end;local a8={mouse_click=true,mouse_up=true,monitor_touch=true,mouse_scroll=true}if a8[G]then local l;if a6[2]>0 and a6[3]>0 then l=c.ScreenPos(a6[2],a6[3])end;local a9=nil;if G=="mouse_scroll"or l~=nil and self:within(w,l.x,l.y)then local aa=false;if G=="mouse_scroll"then if self.scrollBar then if l==nil or self:within(w,l.x,l.y)then local ab=a6[1]if ab==0 then ab=-1 end;self:scroll(w,ab)end end;return false else local a4=g.getFrameScreen(D)local p,q=a4:toRealtivePos(l.x,l.y)local ac=a4:getClickArea(p,q,self.padLeft,self.padRight,self.padTop,self.padBottom)if G=="mouse_click"and self.visible then aa=true;a9=f.FrameClickEvent(w,self.id,p,q,ac,a6[1])elseif G=="mouse_up"then a9=f.FrameDeactivateEvent(w,self.id,p,q,ac,a6[1])elseif G=="monitor_touch"and self.visible then aa=true;a9=f.FrameTouchEvent(w,self.id,p,q,ac)end;if a9~=nil then os.queueEvent(a9.name,a9)end end;return aa end end;return false end;function s:bind(w)return i(w,self)end;return s
